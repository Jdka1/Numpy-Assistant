label,text,example
numpy.empty,"Return a new array of given shape and type, without initializing entries.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty</span><span class=""p"">([</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([[ -9.74499359e+001,   6.69583040e-309],</span>
<span class=""go"">       [  2.13182611e-314,   3.06959433e-309]])         #uninitialized</span>
</pre>"
numpy.empty_like,Return a new array with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">])</span>                         <span class=""c1""># a is array-like</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[-1073741821, -1073741821,           3],    # uninitialized</span>
<span class=""go"">       [          0,           0, -1073741821]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""mf"">2.</span><span class=""p"">,</span> <span class=""mf"">3.</span><span class=""p"">],[</span><span class=""mf"">4.</span><span class=""p"">,</span><span class=""mf"">5.</span><span class=""p"">,</span><span class=""mf"">6.</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[ -2.00000715e+000,   1.48219694e-323,  -2.00000572e+000], # uninitialized</span>
<span class=""go"">       [  4.38791518e-305,  -2.00000715e+000,   4.17269252e-309]])</span>
</pre>"
numpy.eye,Return a 2-D array with ones on the diagonal and zeros elsewhere.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">array([[1, 0],</span>
<span class=""go"">       [0, 1]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">k</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[0.,  1.,  0.],</span>
<span class=""go"">       [0.,  0.,  1.],</span>
<span class=""go"">       [0.,  0.,  0.]])</span>
</pre>"
numpy.identity,Return the identity array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">identity</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">array([[1.,  0.,  0.],</span>
<span class=""go"">       [0.,  1.,  0.],</span>
<span class=""go"">       [0.,  0.,  1.]])</span>
</pre>"
numpy.ones,"Return a new array of given shape and type, filled with ones.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([1., 1., 1., 1., 1.])</span>
</pre>"
numpy.ones_like,Return an array of ones with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">x</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 4, 5]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array([[1, 1, 1],</span>
<span class=""go"">       [1, 1, 1]])</span>
</pre>"
numpy.zeros,"Return a new array of given shape and type, filled with zeros.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([ 0.,  0.,  0.,  0.,  0.])</span>
</pre>"
numpy.zeros_like,Return an array of zeros with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">x</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 4, 5]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array([[0, 0, 0],</span>
<span class=""go"">       [0, 0, 0]])</span>
</pre>"
numpy.full,"Return a new array of given shape and type, filled with fill_value.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">array([[inf, inf],</span>
<span class=""go"">       [inf, inf]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">),</span> <span class=""mi"">10</span><span class=""p"">)</span>
<span class=""go"">array([[10, 10],</span>
<span class=""go"">       [10, 10]])</span>
</pre>"
numpy.full_like,Return a full array with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([1, 1, 1, 1, 1, 1])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mf"">0.1</span><span class=""p"">)</span>
<span class=""go"">array([0, 0, 0, 0, 0, 0])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mf"">0.1</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">double</span><span class=""p"">)</span>
<span class=""go"">array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">full_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">double</span><span class=""p"">)</span>
<span class=""go"">array([nan, nan, nan, nan, nan, nan])</span>
</pre>"
numpy.array,Create an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""go"">array([1, 2, 3])</span>
</pre>"
numpy.asarray,Convert the input to an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.asanyarray,"Convert the input to an ndarray, but pass ndarray subclasses through.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asanyarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.ascontiguousarray,Return a contiguous array (ndim >= 1) in memory (C order).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'F'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flags</span><span class=""p"">[</span><span class=""s1"">'F_CONTIGUOUS'</span><span class=""p"">]</span>
<span class=""go"">True</span>
</pre>"
numpy.asmatrix,Interpret the input as a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
</pre>"
numpy.copy,Return an array copy of the given object.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">copy</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>  
</pre>"
numpy.frombuffer,Interpret a buffer as a 1-dimensional array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">(</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt</span> <span class=""o"">=</span> <span class=""n"">dt</span><span class=""o"">.</span><span class=""n"">newbyteorder</span><span class=""p"">(</span><span class=""s1"">'&gt;'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">frombuffer</span><span class=""p"">(</span><span class=""n"">buf</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">dt</span><span class=""p"">)</span> 
</pre>"
numpy.from_dlpack,"Create a NumPy array from an object implementing the __dlpack__
protocol. Generally, the returned NumPy array is a read-only view
of the input object. See [1] and [2] for more details.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">torch</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">torch</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># create a view of the torch tensor ""x"" in NumPy</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">from_dlpack</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
</pre>"
numpy.fromfile,Construct an array from data in a text or binary file.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">([(</span><span class=""s1"">'time'</span><span class=""p"">,</span> <span class=""p"">[(</span><span class=""s1"">'min'</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">),</span> <span class=""p"">(</span><span class=""s1"">'sec'</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">)]),</span>
<span class=""gp"">... </span>               <span class=""p"">(</span><span class=""s1"">'temp'</span><span class=""p"">,</span> <span class=""nb"">float</span><span class=""p"">)])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">dt</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""p"">[</span><span class=""s1"">'time'</span><span class=""p"">][</span><span class=""s1"">'min'</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">10</span><span class=""p"">;</span> <span class=""n"">x</span><span class=""p"">[</span><span class=""s1"">'temp'</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mf"">98.25</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([((10, 0), 98.25)],</span>
<span class=""go"">      dtype=[('time', [('min', '&lt;i8'), ('sec', '&lt;i8')]), ('temp', '&lt;f8')])</span>
</pre>"
numpy.fromfunction,Construct an array by executing a function over each coordinate.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromfunction</span><span class=""p"">(</span><span class=""k"">lambda</span> <span class=""n"">i</span><span class=""p"">,</span> <span class=""n"">j</span><span class=""p"">:</span> <span class=""n"">i</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">array([[0., 0.],</span>
<span class=""go"">       [1., 1.]])</span>
</pre>"
numpy.fromiter,Create a new 1-dimensional array from an iterable object.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">iterable</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""n"">x</span><span class=""o"">*</span><span class=""n"">x</span> <span class=""k"">for</span> <span class=""n"">x</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromiter</span><span class=""p"">(</span><span class=""n"">iterable</span><span class=""p"">,</span> <span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">array([  0.,   1.,   4.,   9.,  16.])</span>
</pre>"
numpy.fromstring,A new 1-D array initialized from text data in a string.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromstring</span><span class=""p"">(</span><span class=""s1"">'1 2'</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">,</span> <span class=""n"">sep</span><span class=""o"">=</span><span class=""s1"">' '</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromstring</span><span class=""p"">(</span><span class=""s1"">'1, 2'</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">,</span> <span class=""n"">sep</span><span class=""o"">=</span><span class=""s1"">','</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.loadtxt,Load data from a text file.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">io</span> <span class=""kn"">import</span> <span class=""n"">StringIO</span>   <span class=""c1""># StringIO behaves like a file object</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">StringIO</span><span class=""p"">(</span><span class=""s2"">""0 1</span><span class=""se"">\n</span><span class=""s2"">2 3""</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">loadtxt</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array([[0., 1.],</span>
<span class=""go"">       [2., 3.]])</span>
</pre>"
numpy.core.records.array,Construct a record array from a wide-variety of objects.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">9</span><span class=""p"">]])</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6],</span>
<span class=""go"">       [7, 8, 9]])</span>
</pre>"
numpy.core.records.fromarrays,Create a record array from a (flat) list of arrays,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x1</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x2</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a'</span><span class=""p"">,</span><span class=""s1"">'dd'</span><span class=""p"">,</span><span class=""s1"">'xyz'</span><span class=""p"">,</span><span class=""s1"">'12'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x3</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">core</span><span class=""o"">.</span><span class=""n"">records</span><span class=""o"">.</span><span class=""n"">fromarrays</span><span class=""p"">([</span><span class=""n"">x1</span><span class=""p"">,</span><span class=""n"">x2</span><span class=""p"">,</span><span class=""n"">x3</span><span class=""p"">],</span><span class=""n"">names</span><span class=""o"">=</span><span class=""s1"">'a,b,c'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">r</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">])</span>
<span class=""go"">(2, 'dd', 2.0) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x1</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]</span><span class=""o"">=</span><span class=""mi"">34</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">.</span><span class=""n"">a</span>
<span class=""go"">array([1, 2, 3, 4])</span>
</pre>"
numpy.core.records.fromrecords,Create a recarray from a list of records in text form.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">core</span><span class=""o"">.</span><span class=""n"">records</span><span class=""o"">.</span><span class=""n"">fromrecords</span><span class=""p"">([(</span><span class=""mi"">456</span><span class=""p"">,</span><span class=""s1"">'dbe'</span><span class=""p"">,</span><span class=""mf"">1.2</span><span class=""p"">),(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""s1"">'de'</span><span class=""p"">,</span><span class=""mf"">1.3</span><span class=""p"">)],</span>
<span class=""gp"">... </span><span class=""n"">names</span><span class=""o"">=</span><span class=""s1"">'col1,col2,col3'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">r</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">(456, 'dbe', 1.2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">.</span><span class=""n"">col1</span>
<span class=""go"">array([456,   2])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">.</span><span class=""n"">col2</span>
<span class=""go"">array(['dbe', 'de'], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">pickle</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">pickle</span><span class=""o"">.</span><span class=""n"">loads</span><span class=""p"">(</span><span class=""n"">pickle</span><span class=""o"">.</span><span class=""n"">dumps</span><span class=""p"">(</span><span class=""n"">r</span><span class=""p"">))</span>
<span class=""go"">rec.array([(456, 'dbe', 1.2), (  2, 'de', 1.3)],</span>
<span class=""go"">          dtype=[('col1', '&lt;i8'), ('col2', '&lt;U3'), ('col3', '&lt;f8')])</span>
</pre>"
numpy.core.records.fromstring,Create a record array from binary data,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""sa"">b</span><span class=""s1"">'</span><span class=""se"">\x01\x02\x03</span><span class=""s1"">abc'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">core</span><span class=""o"">.</span><span class=""n"">records</span><span class=""o"">.</span><span class=""n"">fromstring</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'u1,u1,u1,S3'</span><span class=""p"">)</span>
<span class=""go"">rec.array([(1, 2, 3, b'abc')],</span>
<span class=""go"">        dtype=[('f0', 'u1'), ('f1', 'u1'), ('f2', 'u1'), ('f3', 'S3')])</span>
</pre>"
numpy.core.records.fromfile,Create an array from binary file data,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">tempfile</span> <span class=""kn"">import</span> <span class=""n"">TemporaryFile</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">,</span><span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'f8,i4,a5'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">5</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""mf"">0.5</span><span class=""p"">,</span><span class=""mi"">10</span><span class=""p"">,</span><span class=""s1"">'abcde'</span><span class=""p"">)</span>
<span class=""go"">&gt;&gt;&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">fd</span><span class=""o"">=</span><span class=""n"">TemporaryFile</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">newbyteorder</span><span class=""p"">(</span><span class=""s1"">'&lt;'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">tofile</span><span class=""p"">(</span><span class=""n"">fd</span><span class=""p"">)</span>
<span class=""go"">&gt;&gt;&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">_</span> <span class=""o"">=</span> <span class=""n"">fd</span><span class=""o"">.</span><span class=""n"">seek</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">core</span><span class=""o"">.</span><span class=""n"">records</span><span class=""o"">.</span><span class=""n"">fromfile</span><span class=""p"">(</span><span class=""n"">fd</span><span class=""p"">,</span> <span class=""n"">formats</span><span class=""o"">=</span><span class=""s1"">'f8,i4,a5'</span><span class=""p"">,</span> <span class=""n"">shape</span><span class=""o"">=</span><span class=""mi"">10</span><span class=""p"">,</span>
<span class=""gp"">... </span><span class=""n"">byteorder</span><span class=""o"">=</span><span class=""s1"">'&lt;'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">r</span><span class=""p"">[</span><span class=""mi"">5</span><span class=""p"">])</span>
<span class=""go"">(0.5, 10, 'abcde')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(10,)</span>
</pre>"
numpy.core.defchararray.array,Create a chararray.,
numpy.core.defchararray.asarray,"Convert the input to a chararray, copying the data only if
necessary.",
numpy.arange,Return evenly spaced values within a given interval.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mf"">0.5</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""o"">-</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mf"">0.5</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">array([-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8])</span>
</pre>"
numpy.linspace,Return evenly spaced numbers over a specified interval.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linspace</span><span class=""p"">(</span><span class=""mf"">2.0</span><span class=""p"">,</span> <span class=""mf"">3.0</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([2.  , 2.25, 2.5 , 2.75, 3.  ])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linspace</span><span class=""p"">(</span><span class=""mf"">2.0</span><span class=""p"">,</span> <span class=""mf"">3.0</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""n"">endpoint</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">array([2. ,  2.2,  2.4,  2.6,  2.8])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linspace</span><span class=""p"">(</span><span class=""mf"">2.0</span><span class=""p"">,</span> <span class=""mf"">3.0</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""n"">retstep</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""go"">(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)</span>
</pre>"
numpy.logspace,Return numbers spaced evenly on a log scale.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linspace</span><span class=""p"">(</span><span class=""n"">start</span><span class=""p"">,</span> <span class=""n"">stop</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""n"">num</span><span class=""p"">,</span> <span class=""n"">endpoint</span><span class=""o"">=</span><span class=""n"">endpoint</span><span class=""p"">)</span>
<span class=""gp"">... </span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">power</span><span class=""p"">(</span><span class=""n"">base</span><span class=""p"">,</span> <span class=""n"">y</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">astype</span><span class=""p"">(</span><span class=""n"">dtype</span><span class=""p"">)</span>
<span class=""gp"">... </span>
</pre>"
numpy.geomspace,Return numbers spaced evenly on a log scale (a geometric progression).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geomspace</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1000</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">array([    1.,    10.,   100.,  1000.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geomspace</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1000</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">endpoint</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">array([   1.,   10.,  100.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geomspace</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1000</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""n"">endpoint</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">array([   1.        ,    5.62341325,   31.6227766 ,  177.827941  ])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geomspace</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">256</span><span class=""p"">,</span> <span class=""n"">num</span><span class=""o"">=</span><span class=""mi"">9</span><span class=""p"">)</span>
<span class=""go"">array([   1.,    2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.])</span>
</pre>"
numpy.meshgrid,Return coordinate matrices from coordinate vectors.,"<pre><span></span><span class=""n"">xv</span><span class=""p"">,</span> <span class=""n"">yv</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">meshgrid</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">y</span><span class=""p"">,</span> <span class=""n"">indexing</span><span class=""o"">=</span><span class=""s1"">'ij'</span><span class=""p"">)</span>
<span class=""k"">for</span> <span class=""n"">i</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""n"">nx</span><span class=""p"">):</span>
    <span class=""k"">for</span> <span class=""n"">j</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""n"">ny</span><span class=""p"">):</span>
        <span class=""c1""># treat xv[i,j], yv[i,j]</span>

<span class=""n"">xv</span><span class=""p"">,</span> <span class=""n"">yv</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">meshgrid</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">y</span><span class=""p"">,</span> <span class=""n"">indexing</span><span class=""o"">=</span><span class=""s1"">'xy'</span><span class=""p"">)</span>
<span class=""k"">for</span> <span class=""n"">i</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""n"">nx</span><span class=""p"">):</span>
    <span class=""k"">for</span> <span class=""n"">j</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""n"">ny</span><span class=""p"">):</span>
        <span class=""c1""># treat xv[j,i], yv[j,i]</span>
</pre>"
numpy.mgrid,nd_grid instance which returns a dense multi-dimensional “meshgrid”.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">]</span>
<span class=""go"">array([[[0, 0, 0, 0, 0],</span>
<span class=""go"">        [1, 1, 1, 1, 1],</span>
<span class=""go"">        [2, 2, 2, 2, 2],</span>
<span class=""go"">        [3, 3, 3, 3, 3],</span>
<span class=""go"">        [4, 4, 4, 4, 4]],</span>
<span class=""go"">       [[0, 1, 2, 3, 4],</span>
<span class=""go"">        [0, 1, 2, 3, 4],</span>
<span class=""go"">        [0, 1, 2, 3, 4],</span>
<span class=""go"">        [0, 1, 2, 3, 4],</span>
<span class=""go"">        [0, 1, 2, 3, 4]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">:</span><span class=""mi"">1</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""n"">j</span><span class=""p"">]</span>
<span class=""go"">array([-1. , -0.5,  0. ,  0.5,  1. ])</span>
</pre>"
numpy.ogrid,nd_grid instance which returns an open multi-dimensional “meshgrid”.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">ogrid</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ogrid</span><span class=""p"">[</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">:</span><span class=""mi"">1</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""n"">j</span><span class=""p"">]</span>
<span class=""go"">array([-1. , -0.5,  0. ,  0.5,  1. ])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ogrid</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">]</span>
<span class=""go"">[array([[0],</span>
<span class=""go"">        [1],</span>
<span class=""go"">        [2],</span>
<span class=""go"">        [3],</span>
<span class=""go"">        [4]]), array([[0, 1, 2, 3, 4]])]</span>
</pre>"
numpy.diag,Extract a diagonal or construct a diagonal array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 4, 5],</span>
<span class=""go"">       [6, 7, 8]])</span>
</pre>"
numpy.diagflat,Create a two-dimensional array with the flattened input as a diagonal.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">diagflat</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""go"">array([[1, 0, 0, 0],</span>
<span class=""go"">       [0, 2, 0, 0],</span>
<span class=""go"">       [0, 0, 3, 0],</span>
<span class=""go"">       [0, 0, 0, 4]])</span>
</pre>"
numpy.tri,An array with ones at and below the given diagonal and zeros elsewhere.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tri</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">array([[1, 1, 1, 0, 0],</span>
<span class=""go"">       [1, 1, 1, 1, 0],</span>
<span class=""go"">       [1, 1, 1, 1, 1]])</span>
</pre>"
numpy.tril,Lower triangle of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tril</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">],[</span><span class=""mi"">7</span><span class=""p"">,</span><span class=""mi"">8</span><span class=""p"">,</span><span class=""mi"">9</span><span class=""p"">],[</span><span class=""mi"">10</span><span class=""p"">,</span><span class=""mi"">11</span><span class=""p"">,</span><span class=""mi"">12</span><span class=""p"">]],</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[ 0,  0,  0],</span>
<span class=""go"">       [ 4,  0,  0],</span>
<span class=""go"">       [ 7,  8,  0],</span>
<span class=""go"">       [10, 11, 12]])</span>
</pre>"
numpy.triu,Upper triangle of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">triu</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">],[</span><span class=""mi"">7</span><span class=""p"">,</span><span class=""mi"">8</span><span class=""p"">,</span><span class=""mi"">9</span><span class=""p"">],[</span><span class=""mi"">10</span><span class=""p"">,</span><span class=""mi"">11</span><span class=""p"">,</span><span class=""mi"">12</span><span class=""p"">]],</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[ 1,  2,  3],</span>
<span class=""go"">       [ 4,  5,  6],</span>
<span class=""go"">       [ 0,  8,  9],</span>
<span class=""go"">       [ 0,  0, 12]])</span>
</pre>"
numpy.vander,Generate a Vandermonde matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">N</span> <span class=""o"">=</span> <span class=""mi"">3</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vander</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">N</span><span class=""p"">)</span>
<span class=""go"">array([[ 1,  1,  1],</span>
<span class=""go"">       [ 4,  2,  1],</span>
<span class=""go"">       [ 9,  3,  1],</span>
<span class=""go"">       [25,  5,  1]])</span>
</pre>"
numpy.mat,Interpret the input as a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
</pre>"
numpy.bmat,"Build a matrix object from a string, nested sequence, or array.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mat</span><span class=""p"">(</span><span class=""s1"">'1 1; 1 1'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">B</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mat</span><span class=""p"">(</span><span class=""s1"">'2 2; 2 2'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">C</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mat</span><span class=""p"">(</span><span class=""s1"">'3 4; 5 6'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">D</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mat</span><span class=""p"">(</span><span class=""s1"">'7 8; 9 0'</span><span class=""p"">)</span>
</pre>"
numpy.copyto,"Copies values from one array to another, broadcasting as necessary.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">B</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">copyto</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span> <span class=""n"">B</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span>
<span class=""go"">array([1, 2, 3])</span>
</pre>"
numpy.shape,Return the shape of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">(3, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""go"">(1, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">(1,)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">()</span>
</pre>"
numpy.reshape,Gives a new shape to an array without changing its data.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>

<span class=""go""># A transpose makes the array non-contiguous</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">T</span>

<span class=""go""># Taking a view makes it possible to modify the shape without modifying</span>
<span class=""go""># the initial object.</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">b</span><span class=""o"">.</span><span class=""n"">view</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span><span class=""o"">.</span><span class=""n"">shape</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""mi"">20</span><span class=""p"">)</span>
<span class=""gt"">Traceback (most recent call last):</span>
   <span class=""c"">...</span>
<span class=""gr"">AttributeError</span>: <span class=""n"">Incompatible shape for in-place modification. Use</span>
<span class=""go"">`.reshape()` to make a copy with the desired shape.</span>
</pre>"
numpy.ravel,Return a contiguous flattened array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ravel</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array([1, 2, 3, 4, 5, 6])</span>
</pre>"
numpy.ndarray.flat,A 1-D iterator over the array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">7</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flat</span><span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">]</span>
<span class=""go"">4</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">T</span>
<span class=""go"">array([[1, 4],</span>
<span class=""go"">       [2, 5],</span>
<span class=""go"">       [3, 6]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">T</span><span class=""o"">.</span><span class=""n"">flat</span><span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">]</span>
<span class=""go"">5</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">type</span><span class=""p"">(</span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flat</span><span class=""p"">)</span>
<span class=""go"">&lt;class 'numpy.flatiter'&gt;</span>
</pre>"
numpy.ndarray.flatten,Return a copy of the array collapsed into one dimension.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">flatten</span><span class=""p"">()</span>
<span class=""go"">array([1, 2, 3, 4])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">flatten</span><span class=""p"">(</span><span class=""s1"">'F'</span><span class=""p"">)</span>
<span class=""go"">array([1, 3, 2, 4])</span>
</pre>"
numpy.moveaxis,Move axes of an array to new positions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">moveaxis</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(4, 5, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">moveaxis</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(5, 3, 4)</span>
</pre>"
numpy.rollaxis,"Roll the specified axis backwards, until it lies in a given position.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rollaxis</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 6, 4, 5)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rollaxis</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(5, 3, 4, 6)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rollaxis</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 5, 6, 4)</span>
</pre>"
numpy.swapaxes,Interchange two axes of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">swapaxes</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[1],</span>
<span class=""go"">       [2],</span>
<span class=""go"">       [3]])</span>
</pre>"
numpy.ndarray.T,View of the transposed array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">T</span>
<span class=""go"">array([[1, 3],</span>
<span class=""go"">       [2, 4]])</span>
</pre>"
numpy.transpose,Returns an array with axes transposed.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">transpose</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[1, 3],</span>
<span class=""go"">       [2, 4]])</span>
</pre>"
numpy.atleast_1d,Convert inputs to arrays with at least one dimension.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_1d</span><span class=""p"">(</span><span class=""mf"">1.0</span><span class=""p"">)</span>
<span class=""go"">array([1.])</span>
</pre>"
numpy.atleast_2d,View inputs as arrays with at least two dimensions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_2d</span><span class=""p"">(</span><span class=""mf"">3.0</span><span class=""p"">)</span>
<span class=""go"">array([[3.]])</span>
</pre>"
numpy.atleast_3d,View inputs as arrays with at least three dimensions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_3d</span><span class=""p"">(</span><span class=""mf"">3.0</span><span class=""p"">)</span>
<span class=""go"">array([[[3.]]])</span>
</pre>"
numpy.broadcast,Produce an object that mimics broadcasting.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">broadcast</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">y</span><span class=""p"">)</span>
</pre>"
numpy.broadcast_to,Broadcast an array to a new shape.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">broadcast_to</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [1, 2, 3],</span>
<span class=""go"">       [1, 2, 3]])</span>
</pre>"
numpy.broadcast_arrays,Broadcast any number of arrays against each other.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">4</span><span class=""p"">],[</span><span class=""mi"">5</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">broadcast_arrays</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">y</span><span class=""p"">)</span>
<span class=""go"">[array([[1, 2, 3],</span>
<span class=""go"">       [1, 2, 3]]), array([[4, 4, 4],</span>
<span class=""go"">       [5, 5, 5]])]</span>
</pre>"
numpy.expand_dims,Expand the shape of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(2,)</span>
</pre>"
numpy.squeeze,Remove axes of length one from a.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[[</span><span class=""mi"">0</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 3, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3,)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""gt"">Traceback (most recent call last):</span>
<span class=""c"">...</span>
<span class=""gr"">ValueError</span>: <span class=""n"">cannot select an axis to squeeze out which has size not equal to one</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">2</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1234</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array(1234)  # 0d array</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)[()]</span>
<span class=""go"">1234</span>
</pre>"
numpy.asarray,Convert the input to an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.asanyarray,"Convert the input to an ndarray, but pass ndarray subclasses through.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asanyarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.asmatrix,Interpret the input as a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
</pre>"
numpy.asfarray,Return an array converted to a float type.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asfarray</span><span class=""p"">([</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""go"">array([2.,  3.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asfarray</span><span class=""p"">([</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'float'</span><span class=""p"">)</span>
<span class=""go"">array([2.,  3.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asfarray</span><span class=""p"">([</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'int8'</span><span class=""p"">)</span>
<span class=""go"">array([2.,  3.])</span>
</pre>"
numpy.asfortranarray,Return an array (ndim >= 1) laid out in Fortran order in memory.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'C'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flags</span><span class=""p"">[</span><span class=""s1"">'C_CONTIGUOUS'</span><span class=""p"">]</span>
<span class=""go"">True</span>
</pre>"
numpy.ascontiguousarray,Return a contiguous array (ndim >= 1) in memory (C order).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'F'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flags</span><span class=""p"">[</span><span class=""s1"">'F_CONTIGUOUS'</span><span class=""p"">]</span>
<span class=""go"">True</span>
</pre>"
numpy.asarray_chkfinite,"Convert the input to an array, checking for NaNs or Infs.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">asarray_chkfinite</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">array([1., 2.])</span>
</pre>"
numpy.require,Return an ndarray of the provided type that satisfies requirements.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">flags</span>
<span class=""go"">  C_CONTIGUOUS : True</span>
<span class=""go"">  F_CONTIGUOUS : False</span>
<span class=""go"">  OWNDATA : False</span>
<span class=""go"">  WRITEABLE : True</span>
<span class=""go"">  ALIGNED : True</span>
<span class=""go"">  WRITEBACKIFCOPY : False</span>
</pre>"
numpy.concatenate,Join a sequence of arrays along an existing axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">concatenate</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">),</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4],</span>
<span class=""go"">       [5, 6]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">concatenate</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""o"">.</span><span class=""n"">T</span><span class=""p"">),</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[1, 2, 5],</span>
<span class=""go"">       [3, 4, 6]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">concatenate</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">),</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">)</span>
<span class=""go"">array([1, 2, 3, 4, 5, 6])</span>
</pre>"
numpy.stack,Join a sequence of arrays along a new axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arrays</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span> <span class=""k"">for</span> <span class=""n"">_</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">stack</span><span class=""p"">(</span><span class=""n"">arrays</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(10, 3, 4)</span>
</pre>"
numpy.block,Assemble an nd-array from nested lists of blocks.,"<pre><span></span><span class=""n"">AAAbb</span>
<span class=""n"">AAAbb</span>
<span class=""n"">cccDD</span>
</pre>"
numpy.vstack,Stack arrays in sequence vertically (row wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
</pre>"
numpy.hstack,Stack arrays in sequence horizontally (column wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([1, 2, 3, 4, 5, 6])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">4</span><span class=""p"">],[</span><span class=""mi"">5</span><span class=""p"">],[</span><span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 4],</span>
<span class=""go"">       [2, 5],</span>
<span class=""go"">       [3, 6]])</span>
</pre>"
numpy.dstack,Stack arrays in sequence depth wise (along third axis).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[[1, 2],</span>
<span class=""go"">        [2, 3],</span>
<span class=""go"">        [3, 4]]])</span>
</pre>"
numpy.column_stack,Stack 1-D arrays as columns into a 2-D array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">column_stack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [2, 3],</span>
<span class=""go"">       [3, 4]])</span>
</pre>"
numpy.row_stack,Stack arrays in sequence vertically (row wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
</pre>"
numpy.split,Split an array into multiple sub-arrays as views into ary.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">9.0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">split</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">[array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.,  8.])]</span>
</pre>"
numpy.array_split,Split an array into multiple sub-arrays.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">8.0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_split</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">[array([0.,  1.,  2.]), array([3.,  4.,  5.]), array([6.,  7.])]</span>
</pre>"
numpy.dsplit,Split array into multiple sub-arrays along the 3rd axis (depth).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">16.0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[[ 0.,   1.,   2.,   3.],</span>
<span class=""go"">        [ 4.,   5.,   6.,   7.]],</span>
<span class=""go"">       [[ 8.,   9.,  10.,  11.],</span>
<span class=""go"">        [12.,  13.,  14.,  15.]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">[array([[[ 0.,  1.],</span>
<span class=""go"">        [ 4.,  5.]],</span>
<span class=""go"">       [[ 8.,  9.],</span>
<span class=""go"">        [12., 13.]]]), array([[[ 2.,  3.],</span>
<span class=""go"">        [ 6.,  7.]],</span>
<span class=""go"">       [[10., 11.],</span>
<span class=""go"">        [14., 15.]]])]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]))</span>
<span class=""go"">[array([[[ 0.,   1.,   2.],</span>
<span class=""go"">        [ 4.,   5.,   6.]],</span>
<span class=""go"">       [[ 8.,   9.,  10.],</span>
<span class=""go"">        [12.,  13.,  14.]]]),</span>
<span class=""go""> array([[[ 3.],</span>
<span class=""go"">        [ 7.]],</span>
<span class=""go"">       [[11.],</span>
<span class=""go"">        [15.]]]),</span>
<span class=""go"">array([], shape=(2, 2, 0), dtype=float64)]</span>
</pre>"
numpy.hsplit,Split an array into multiple sub-arrays horizontally (column-wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">16.0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[ 0.,   1.,   2.,   3.],</span>
<span class=""go"">       [ 4.,   5.,   6.,   7.],</span>
<span class=""go"">       [ 8.,   9.,  10.,  11.],</span>
<span class=""go"">       [12.,  13.,  14.,  15.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">[array([[  0.,   1.],</span>
<span class=""go"">       [  4.,   5.],</span>
<span class=""go"">       [  8.,   9.],</span>
<span class=""go"">       [12.,  13.]]),</span>
<span class=""go""> array([[  2.,   3.],</span>
<span class=""go"">       [  6.,   7.],</span>
<span class=""go"">       [10.,  11.],</span>
<span class=""go"">       [14.,  15.]])]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]))</span>
<span class=""go"">[array([[ 0.,   1.,   2.],</span>
<span class=""go"">       [ 4.,   5.,   6.],</span>
<span class=""go"">       [ 8.,   9.,  10.],</span>
<span class=""go"">       [12.,  13.,  14.]]),</span>
<span class=""go""> array([[ 3.],</span>
<span class=""go"">       [ 7.],</span>
<span class=""go"">       [11.],</span>
<span class=""go"">       [15.]]),</span>
<span class=""go""> array([], shape=(4, 0), dtype=float64)]</span>
</pre>"
numpy.vsplit,Split an array into multiple sub-arrays vertically (row-wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">16.0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[ 0.,   1.,   2.,   3.],</span>
<span class=""go"">       [ 4.,   5.,   6.,   7.],</span>
<span class=""go"">       [ 8.,   9.,  10.,  11.],</span>
<span class=""go"">       [12.,  13.,  14.,  15.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">[array([[0., 1., 2., 3.],</span>
<span class=""go"">       [4., 5., 6., 7.]]), array([[ 8.,  9., 10., 11.],</span>
<span class=""go"">       [12., 13., 14., 15.]])]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]))</span>
<span class=""go"">[array([[ 0.,  1.,  2.,  3.],</span>
<span class=""go"">       [ 4.,  5.,  6.,  7.],</span>
<span class=""go"">       [ 8.,  9., 10., 11.]]), array([[12., 13., 14., 15.]]), array([], shape=(0, 4), dtype=float64)]</span>
</pre>"
numpy.tile,Construct an array by repeating A the number of times given by reps.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tile</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([0, 1, 2, 0, 1, 2])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tile</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">array([[0, 1, 2, 0, 1, 2],</span>
<span class=""go"">       [0, 1, 2, 0, 1, 2]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tile</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">array([[[0, 1, 2, 0, 1, 2]],</span>
<span class=""go"">       [[0, 1, 2, 0, 1, 2]]])</span>
</pre>"
numpy.repeat,Repeat elements of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">repeat</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">array([3, 3, 3, 3])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">repeat</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([1, 1, 2, 2, 3, 3, 4, 4])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">repeat</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[1, 1, 1, 2, 2, 2],</span>
<span class=""go"">       [3, 3, 3, 4, 4, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">repeat</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4],</span>
<span class=""go"">       [3, 4]])</span>
</pre>"
numpy.delete,"Return a new array with sub-arrays along an axis deleted. For a one
dimensional array, this returns those entries not returned by
arr[obj].","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arr</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">12</span><span class=""p"">)</span> <span class=""o"">+</span> <span class=""mi"">1</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">mask</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">(</span><span class=""nb"">len</span><span class=""p"">(</span><span class=""n"">arr</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">bool</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">mask</span><span class=""p"">[[</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]]</span> <span class=""o"">=</span> <span class=""kc"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">result</span> <span class=""o"">=</span> <span class=""n"">arr</span><span class=""p"">[</span><span class=""n"">mask</span><span class=""p"">,</span><span class=""o"">...</span><span class=""p"">]</span>
</pre>"
numpy.insert,Insert values along the given axis before the given indices.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[1, 1],</span>
<span class=""go"">       [2, 2],</span>
<span class=""go"">       [3, 3]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">insert</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([1, 5, 1, ..., 2, 3, 3])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">insert</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[1, 5, 1],</span>
<span class=""go"">       [2, 5, 2],</span>
<span class=""go"">       [3, 5, 3]])</span>
</pre>"
numpy.append,Append values to the end of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">append</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[[</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">9</span><span class=""p"">]])</span>
<span class=""go"">array([1, 2, 3, ..., 7, 8, 9])</span>
</pre>"
numpy.resize,Return a new array with the specified shape.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 0, 1]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,(</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""go"">array([[0, 1, 2, 3]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""go"">array([[0, 1, 2, 3],</span>
<span class=""go"">       [0, 1, 2, 3]])</span>
</pre>"
numpy.trim_zeros,Trim the leading and/or trailing zeros from a 1-D array or sequence.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">trim_zeros</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2, 3, 0, 2, 1])</span>
</pre>"
numpy.unique,Find the unique elements of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">unique</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""go"">array([1, 2, 3])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">unique</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 2, 3])</span>
</pre>"
numpy.flip,Reverse the order of elements in an array along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">8</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span>
<span class=""go"">array([[[0, 1],</span>
<span class=""go"">        [2, 3]],</span>
<span class=""go"">       [[4, 5],</span>
<span class=""go"">        [6, 7]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flip</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">array([[[4, 5],</span>
<span class=""go"">        [6, 7]],</span>
<span class=""go"">       [[0, 1],</span>
<span class=""go"">        [2, 3]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flip</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array([[[2, 3],</span>
<span class=""go"">        [0, 1]],</span>
<span class=""go"">       [[6, 7],</span>
<span class=""go"">        [4, 5]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flip</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">)</span>
<span class=""go"">array([[[7, 6],</span>
<span class=""go"">        [5, 4]],</span>
<span class=""go"">       [[3, 2],</span>
<span class=""go"">        [1, 0]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flip</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">array([[[5, 4],</span>
<span class=""go"">        [7, 6]],</span>
<span class=""go"">       [[1, 0],</span>
<span class=""go"">        [3, 2]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flip</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">)</span> <span class=""o"">==</span> <span class=""n"">A</span><span class=""p"">[:,:,::</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""o"">...</span><span class=""p"">])</span>
<span class=""go"">True</span>
</pre>"
numpy.fliplr,Reverse the order of elements along axis 1 (left/right).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">diag</span><span class=""p"">([</span><span class=""mf"">1.</span><span class=""p"">,</span><span class=""mf"">2.</span><span class=""p"">,</span><span class=""mf"">3.</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span>
<span class=""go"">array([[1.,  0.,  0.],</span>
<span class=""go"">       [0.,  2.,  0.],</span>
<span class=""go"">       [0.,  0.,  3.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fliplr</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">)</span>
<span class=""go"">array([[0.,  0.,  1.],</span>
<span class=""go"">       [0.,  2.,  0.],</span>
<span class=""go"">       [3.,  0.,  0.]])</span>
</pre>"
numpy.flipud,Reverse the order of elements along axis 0 (up/down).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">diag</span><span class=""p"">([</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span>
<span class=""go"">array([[1.,  0.,  0.],</span>
<span class=""go"">       [0.,  2.,  0.],</span>
<span class=""go"">       [0.,  0.,  3.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">flipud</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">)</span>
<span class=""go"">array([[0.,  0.,  3.],</span>
<span class=""go"">       [0.,  2.,  0.],</span>
<span class=""go"">       [1.,  0.,  0.]])</span>
</pre>"
numpy.reshape,Gives a new shape to an array without changing its data.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>

<span class=""go""># A transpose makes the array non-contiguous</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">T</span>

<span class=""go""># Taking a view makes it possible to modify the shape without modifying</span>
<span class=""go""># the initial object.</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">b</span><span class=""o"">.</span><span class=""n"">view</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span><span class=""o"">.</span><span class=""n"">shape</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""mi"">20</span><span class=""p"">)</span>
<span class=""gt"">Traceback (most recent call last):</span>
   <span class=""c"">...</span>
<span class=""gr"">AttributeError</span>: <span class=""n"">Incompatible shape for in-place modification. Use</span>
<span class=""go"">`.reshape()` to make a copy with the desired shape.</span>
</pre>"
numpy.roll,Roll array elements along a given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">roll</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">roll</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([2, 3, 4, 5, 6, 7, 8, 9, 0, 1])</span>
</pre>"
numpy.rot90,Rotate an array by 90 degrees in the plane specified by axes.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rot90</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">array([[2, 4],</span>
<span class=""go"">       [1, 3]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rot90</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([[4, 3],</span>
<span class=""go"">       [2, 1]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">8</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">rot90</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">array([[[1, 3],</span>
<span class=""go"">        [0, 2]],</span>
<span class=""go"">       [[5, 7],</span>
<span class=""go"">        [4, 6]]])</span>
</pre>"
numpy.bitwise_and,Compute the bit-wise AND of two arrays element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">bitwise_and</span><span class=""p"">(</span><span class=""mi"">13</span><span class=""p"">,</span> <span class=""mi"">17</span><span class=""p"">)</span>
<span class=""go"">1</span>
</pre>"
numpy.bitwise_or,Compute the bit-wise OR of two arrays element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">bitwise_or</span><span class=""p"">(</span><span class=""mi"">13</span><span class=""p"">,</span> <span class=""mi"">16</span><span class=""p"">)</span>
<span class=""go"">29</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">29</span><span class=""p"">)</span>
<span class=""go"">'11101'</span>
</pre>"
numpy.bitwise_xor,Compute the bit-wise XOR of two arrays element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">bitwise_xor</span><span class=""p"">(</span><span class=""mi"">13</span><span class=""p"">,</span> <span class=""mi"">17</span><span class=""p"">)</span>
<span class=""go"">28</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">28</span><span class=""p"">)</span>
<span class=""go"">'11100'</span>
</pre>"
numpy.invert,"Compute bit-wise inversion, or bit-wise NOT, element-wise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">bitwise_not</span> <span class=""ow"">is</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">invert</span>
<span class=""go"">True</span>
</pre>"
numpy.left_shift,Shift the bits of an integer to the left.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">'101'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">left_shift</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">20</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">20</span><span class=""p"">)</span>
<span class=""go"">'10100'</span>
</pre>"
numpy.right_shift,Shift the bits of an integer to the right.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""go"">'1010'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">right_shift</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">5</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">'101'</span>
</pre>"
numpy.packbits,Packs the elements of a binary-valued array into bits in a uint8 array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">],</span>
<span class=""gp"">... </span>               <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">]],</span>
<span class=""gp"">... </span>              <span class=""p"">[[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">],</span>
<span class=""gp"">... </span>               <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">packbits</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=-</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span>
<span class=""go"">array([[[160],</span>
<span class=""go"">        [ 64]],</span>
<span class=""go"">       [[192],</span>
<span class=""go"">        [ 32]]], dtype=uint8)</span>
</pre>"
numpy.unpackbits,Unpacks elements of a uint8 array into a binary-valued output array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">7</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">23</span><span class=""p"">]],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">uint8</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 2],</span>
<span class=""go"">       [ 7],</span>
<span class=""go"">       [23]], dtype=uint8)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">unpackbits</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span>
<span class=""go"">array([[0, 0, 0, 0, 0, 0, 1, 0],</span>
<span class=""go"">       [0, 0, 0, 0, 0, 1, 1, 1],</span>
<span class=""go"">       [0, 0, 0, 1, 0, 1, 1, 1]], dtype=uint8)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">unpackbits</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">count</span><span class=""o"">=-</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array([[0, 0, 0, 0, 0],</span>
<span class=""go"">       [0, 0, 0, 0, 0],</span>
<span class=""go"">       [0, 0, 0, 1, 0]], dtype=uint8)</span>
</pre>"
numpy.binary_repr,Return the binary representation of the input number as a string.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">'11'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""o"">-</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">'-11'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">width</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">'0011'</span>
</pre>"
numpy.char.add,Return element-wise string concatenation for two arrays of str or unicode.,
numpy.char.multiply,"Return (a * i), that is string multiple concatenation,
element-wise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""a""</span><span class=""p"">,</span> <span class=""s2"">""b""</span><span class=""p"">,</span> <span class=""s2"">""c""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">multiply</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">array(['aaa', 'bbb', 'ccc'], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">i</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">multiply</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">i</span><span class=""p"">)</span>
<span class=""go"">array(['a', 'bb', 'ccc'], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">multiply</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a'</span><span class=""p"">]),</span> <span class=""n"">i</span><span class=""p"">)</span>
<span class=""go"">array(['a', 'aa', 'aaa'], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a'</span><span class=""p"">,</span> <span class=""s1"">'b'</span><span class=""p"">,</span> <span class=""s1"">'c'</span><span class=""p"">,</span> <span class=""s1"">'d'</span><span class=""p"">,</span> <span class=""s1"">'e'</span><span class=""p"">,</span> <span class=""s1"">'f'</span><span class=""p"">])</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">multiply</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">array([['aaa', 'bbb', 'ccc'],</span>
<span class=""go"">       ['ddd', 'eee', 'fff']], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">multiply</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">i</span><span class=""p"">)</span>
<span class=""go"">array([['a', 'bb', 'ccc'],</span>
<span class=""go"">       ['d', 'ee', 'fff']], dtype='&lt;U3')</span>
</pre>"
numpy.char.mod,"Return (a % i), that is pre-Python 2.6 string formatting
(interpolation), element-wise for a pair of array_likes of str
or unicode.",
numpy.char.capitalize,"Return a copy of a with only the first character of each element
capitalized.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a1b2'</span><span class=""p"">,</span><span class=""s1"">'1b2a'</span><span class=""p"">,</span><span class=""s1"">'b2a1'</span><span class=""p"">,</span><span class=""s1"">'2a1b'</span><span class=""p"">],</span><span class=""s1"">'S4'</span><span class=""p"">);</span> <span class=""n"">c</span>
<span class=""go"">array(['a1b2', '1b2a', 'b2a1', '2a1b'],</span>
<span class=""go"">    dtype='|S4')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">capitalize</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['A1b2', '1b2a', 'B2a1', '2a1b'],</span>
<span class=""go"">    dtype='|S4')</span>
</pre>"
numpy.char.center,"Return a copy of a with its elements centered in a string of
length width.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a1b2'</span><span class=""p"">,</span><span class=""s1"">'1b2a'</span><span class=""p"">,</span><span class=""s1"">'b2a1'</span><span class=""p"">,</span><span class=""s1"">'2a1b'</span><span class=""p"">]);</span> <span class=""n"">c</span>
<span class=""go"">array(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='&lt;U4')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">center</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""n"">width</span><span class=""o"">=</span><span class=""mi"">9</span><span class=""p"">)</span>
<span class=""go"">array(['   a1b2  ', '   1b2a  ', '   b2a1  ', '   2a1b  '], dtype='&lt;U9')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">center</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""n"">width</span><span class=""o"">=</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""n"">fillchar</span><span class=""o"">=</span><span class=""s1"">'*'</span><span class=""p"">)</span>
<span class=""go"">array(['***a1b2**', '***1b2a**', '***b2a1**', '***2a1b**'], dtype='&lt;U9')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">center</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""n"">width</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">array(['a', '1', 'b', '2'], dtype='&lt;U1')</span>
</pre>"
numpy.char.decode,Calls bytes.decode element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""sa"">b</span><span class=""s1"">'</span><span class=""se"">\x81\xc1\x81\xc1\x81\xc1</span><span class=""s1"">'</span><span class=""p"">,</span> <span class=""sa"">b</span><span class=""s1"">'@@</span><span class=""se"">\x81\xc1</span><span class=""s1"">@@'</span><span class=""p"">,</span>
<span class=""gp"">... </span>              <span class=""sa"">b</span><span class=""s1"">'</span><span class=""se"">\x81\x82\xc2\xc1\xc2\x82\x81</span><span class=""s1"">'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array([b'\x81\xc1\x81\xc1\x81\xc1', b'@@\x81\<a class=""__cf_email__"" data-cfemail=""0f776c3e4f"" href=""/cdn-cgi/l/email-protection"">[email protected]</a>@',</span>
<span class=""gp"">... </span>   <span class=""sa"">b</span><span class=""s1"">'</span><span class=""se"">\x81\x82\xc2\xc1\xc2\x82\x81</span><span class=""s1"">'</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'|S7'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">decode</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""n"">encoding</span><span class=""o"">=</span><span class=""s1"">'cp037'</span><span class=""p"">)</span>
<span class=""go"">array(['aAaAaA', '  aA  ', 'abBABba'], dtype='&lt;U7')</span>
</pre>"
numpy.char.encode,Calls str.encode element-wise.,
numpy.char.expandtabs,"Return a copy of each string element where all tab characters are
replaced by one or more spaces.",
numpy.char.join,"Return a string which is the concatenation of the strings in the
sequence seq.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">join</span><span class=""p"">(</span><span class=""s1"">'-'</span><span class=""p"">,</span> <span class=""s1"">'osd'</span><span class=""p"">)</span>
<span class=""go"">array('o-s-d', dtype='&lt;U5')</span>
</pre>"
numpy.char.ljust,"Return an array with the elements of a left-justified in a
string of length width.",
numpy.char.lower,Return an array with the elements converted to lowercase.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'A1B C'</span><span class=""p"">,</span> <span class=""s1"">'1BCA'</span><span class=""p"">,</span> <span class=""s1"">'BCA1'</span><span class=""p"">]);</span> <span class=""n"">c</span>
<span class=""go"">array(['A1B C', '1BCA', 'BCA1'], dtype='&lt;U5')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">lower</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['a1b c', '1bca', 'bca1'], dtype='&lt;U5')</span>
</pre>"
numpy.char.lstrip,"For each element in a, return a copy with the leading characters
removed.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'aAaAaA'</span><span class=""p"">,</span> <span class=""s1"">'  aA  '</span><span class=""p"">,</span> <span class=""s1"">'abBABba'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array(['aAaAaA', '  aA  ', 'abBABba'], dtype='&lt;U7')</span>
</pre>"
numpy.char.partition,Partition each element in a around sep.,
numpy.char.replace,"For each element in a, return a copy of the string with all
occurrences of substring old replaced by new.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""That is a mango""</span><span class=""p"">,</span> <span class=""s2"">""Monkeys eat mangos""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">replace</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""s1"">'mango'</span><span class=""p"">,</span> <span class=""s1"">'banana'</span><span class=""p"">)</span>
<span class=""go"">array(['That is a banana', 'Monkeys eat bananas'], dtype='&lt;U19')</span>
</pre>"
numpy.char.rjust,"Return an array with the elements of a right-justified in a
string of length width.",
numpy.char.rpartition,Partition (split) each element around the right-most separator.,
numpy.char.rsplit,"For each element in a, return a list of the words in the
string, using sep as the delimiter string.",
numpy.char.rstrip,"For each element in a, return a copy with the trailing
characters removed.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'aAaAaA'</span><span class=""p"">,</span> <span class=""s1"">'abBABba'</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'S7'</span><span class=""p"">);</span> <span class=""n"">c</span>
<span class=""go"">array(['aAaAaA', 'abBABba'],</span>
<span class=""go"">    dtype='|S7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">rstrip</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""sa"">b</span><span class=""s1"">'a'</span><span class=""p"">)</span>
<span class=""go"">array(['aAaAaA', 'abBABb'],</span>
<span class=""go"">    dtype='|S7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">rstrip</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""sa"">b</span><span class=""s1"">'A'</span><span class=""p"">)</span>
<span class=""go"">array(['aAaAa', 'abBABba'],</span>
<span class=""go"">    dtype='|S7')</span>
</pre>"
numpy.char.split,"For each element in a, return a list of the words in the
string, using sep as the delimiter string.",
numpy.char.splitlines,"For each element in a, return a list of the lines in the
element, breaking at line boundaries.",
numpy.char.strip,"For each element in a, return a copy with the leading and
trailing characters removed.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'aAaAaA'</span><span class=""p"">,</span> <span class=""s1"">'  aA  '</span><span class=""p"">,</span> <span class=""s1"">'abBABba'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array(['aAaAaA', '  aA  ', 'abBABba'], dtype='&lt;U7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">strip</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['aAaAaA', 'aA', 'abBABba'], dtype='&lt;U7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">strip</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'a'</span><span class=""p"">)</span> <span class=""c1""># 'a' unstripped from c[1] because whitespace leads</span>
<span class=""go"">array(['AaAaA', '  aA  ', 'bBABb'], dtype='&lt;U7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">strip</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'A'</span><span class=""p"">)</span> <span class=""c1""># 'A' unstripped from c[1] because (unprinted) ws trails</span>
<span class=""go"">array(['aAaAa', '  aA  ', 'abBABba'], dtype='&lt;U7')</span>
</pre>"
numpy.char.swapcase,"Return element-wise a copy of the string with
uppercase characters converted to lowercase and vice versa.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a1B c'</span><span class=""p"">,</span><span class=""s1"">'1b Ca'</span><span class=""p"">,</span><span class=""s1"">'b Ca1'</span><span class=""p"">,</span><span class=""s1"">'cA1b'</span><span class=""p"">],</span><span class=""s1"">'S5'</span><span class=""p"">);</span> <span class=""n"">c</span>
<span class=""go"">array(['a1B c', '1b Ca', 'b Ca1', 'cA1b'],</span>
<span class=""go"">    dtype='|S5')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">swapcase</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['A1b C', '1B cA', 'B cA1', 'Ca1B'],</span>
<span class=""go"">    dtype='|S5')</span>
</pre>"
numpy.char.title,Return element-wise title cased version of string or unicode.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a1b c'</span><span class=""p"">,</span><span class=""s1"">'1b ca'</span><span class=""p"">,</span><span class=""s1"">'b ca1'</span><span class=""p"">,</span><span class=""s1"">'ca1b'</span><span class=""p"">],</span><span class=""s1"">'S5'</span><span class=""p"">);</span> <span class=""n"">c</span>
<span class=""go"">array(['a1b c', '1b ca', 'b ca1', 'ca1b'],</span>
<span class=""go"">    dtype='|S5')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">title</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],</span>
<span class=""go"">    dtype='|S5')</span>
</pre>"
numpy.char.translate,"For each element in a, return a copy of the string where all
characters occurring in the optional argument deletechars are
removed, and the remaining characters have been mapped through the
given translation table.",
numpy.char.upper,Return an array with the elements converted to uppercase.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a1b c'</span><span class=""p"">,</span> <span class=""s1"">'1bca'</span><span class=""p"">,</span> <span class=""s1"">'bca1'</span><span class=""p"">]);</span> <span class=""n"">c</span>
<span class=""go"">array(['a1b c', '1bca', 'bca1'], dtype='&lt;U5')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">upper</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array(['A1B C', '1BCA', 'BCA1'], dtype='&lt;U5')</span>
</pre>"
numpy.char.zfill,Return the numeric string left-filled with zeros,
numpy.char.equal,Return (x1 == x2) element-wise.,
numpy.char.not_equal,Return (x1 != x2) element-wise.,
numpy.char.greater_equal,Return (x1 >= x2) element-wise.,
numpy.char.less_equal,Return (x1 <= x2) element-wise.,
numpy.char.greater,Return (x1 > x2) element-wise.,
numpy.char.less,Return (x1 < x2) element-wise.,
numpy.char.compare_chararrays,"Performs element-wise comparison of two string arrays using the
comparison operator specified by cmp_op.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""a""</span><span class=""p"">,</span> <span class=""s2"">""b""</span><span class=""p"">,</span> <span class=""s2"">""cde""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""a""</span><span class=""p"">,</span> <span class=""s2"">""a""</span><span class=""p"">,</span> <span class=""s2"">""dec""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">compare_chararrays</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">,</span> <span class=""s2"">""&gt;""</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">)</span>
<span class=""go"">array([False,  True, False])</span>
</pre>"
numpy.char.count,"Returns an array with the number of non-overlapping occurrences of
substring sub in the range [start, end].","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'aAaAaA'</span><span class=""p"">,</span> <span class=""s1"">'  aA  '</span><span class=""p"">,</span> <span class=""s1"">'abBABba'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array(['aAaAaA', '  aA  ', 'abBABba'], dtype='&lt;U7')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'A'</span><span class=""p"">)</span>
<span class=""go"">array([3, 1, 1])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'aA'</span><span class=""p"">)</span>
<span class=""go"">array([3, 1, 0])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'A'</span><span class=""p"">,</span> <span class=""n"">start</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">end</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">array([2, 1, 1])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">,</span> <span class=""s1"">'A'</span><span class=""p"">,</span> <span class=""n"">start</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">end</span><span class=""o"">=</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">array([1, 0, 0])</span>
</pre>"
numpy.char.endswith,"Returns a boolean array which is True where the string element
in a ends with suffix, otherwise False.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">s</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'foo'</span><span class=""p"">,</span> <span class=""s1"">'bar'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">s</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""s1"">'foo'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">s</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""s1"">'bar'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">s</span>
<span class=""go"">array(['foo', 'bar'], dtype='&lt;U3')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">endswith</span><span class=""p"">(</span><span class=""n"">s</span><span class=""p"">,</span> <span class=""s1"">'ar'</span><span class=""p"">)</span>
<span class=""go"">array([False,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">endswith</span><span class=""p"">(</span><span class=""n"">s</span><span class=""p"">,</span> <span class=""s1"">'a'</span><span class=""p"">,</span> <span class=""n"">start</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">end</span><span class=""o"">=</span><span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">array([False,  True])</span>
</pre>"
numpy.char.find,"For each element, return the lowest index in the string where
substring sub is found.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""NumPy is a Python library""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">find</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""s2"">""Python""</span><span class=""p"">,</span> <span class=""n"">start</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""n"">end</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">)</span>
<span class=""go"">array([11])</span>
</pre>"
numpy.char.index,"Like find, but raises ValueError when the substring is not found.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""Computer Science""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">index</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""s2"">""Science""</span><span class=""p"">,</span> <span class=""n"">start</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""n"">end</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">)</span>
<span class=""go"">array([9])</span>
</pre>"
numpy.char.isalpha,"Returns true for each element if all characters in the string are
alphabetic and there is at least one character, false otherwise.",
numpy.char.isalnum,"Returns true for each element if all characters in the string are
alphanumeric and there is at least one character, false otherwise.",
numpy.char.isdecimal,"For each element, return True if there are only decimal
characters in the element.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isdecimal</span><span class=""p"">([</span><span class=""s1"">'12345'</span><span class=""p"">,</span> <span class=""s1"">'4.99'</span><span class=""p"">,</span> <span class=""s1"">'123ABC'</span><span class=""p"">,</span> <span class=""s1"">''</span><span class=""p"">])</span>
<span class=""go"">array([ True, False, False, False])</span>
</pre>"
numpy.char.isdigit,"Returns true for each element if all characters in the string are
digits and there is at least one character, false otherwise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'a'</span><span class=""p"">,</span> <span class=""s1"">'b'</span><span class=""p"">,</span> <span class=""s1"">'0'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isdigit</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([False, False,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""s1"">'a'</span><span class=""p"">,</span> <span class=""s1"">'b'</span><span class=""p"">,</span> <span class=""s1"">'0'</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""s1"">'c'</span><span class=""p"">,</span> <span class=""s1"">'1'</span><span class=""p"">,</span> <span class=""s1"">'2'</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isdigit</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[False, False,  True], [False,  True,  True]])</span>
</pre>"
numpy.char.islower,"Returns true for each element if all cased characters in the
string are lowercase and there is at least one cased character,
false otherwise.",
numpy.char.isnumeric,"For each element, return True if there are only numeric
characters in the element.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isnumeric</span><span class=""p"">([</span><span class=""s1"">'123'</span><span class=""p"">,</span> <span class=""s1"">'123abc'</span><span class=""p"">,</span> <span class=""s1"">'9.0'</span><span class=""p"">,</span> <span class=""s1"">'1/4'</span><span class=""p"">,</span> <span class=""s1"">'VIII'</span><span class=""p"">])</span>
<span class=""go"">array([ True, False, False, False, False])</span>
</pre>"
numpy.char.isspace,"Returns true for each element if there are only whitespace
characters in the string and there is at least one character,
false otherwise.",
numpy.char.istitle,"Returns true for each element if the element is a titlecased
string and there is at least one character, false otherwise.",
numpy.char.isupper,"Return true for each element if all cased characters in the
string are uppercase and there is at least one character, false
otherwise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">str</span> <span class=""o"">=</span> <span class=""s2"">""GHC""</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isupper</span><span class=""p"">(</span><span class=""nb"">str</span><span class=""p"">)</span>
<span class=""go"">array(True)     </span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""hello""</span><span class=""p"">,</span> <span class=""s2"">""HELLO""</span><span class=""p"">,</span> <span class=""s2"">""Hello""</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">isupper</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([False,  True, False]) </span>
</pre>"
numpy.char.rfind,"For each element in a, return the highest index in the string
where substring sub is found, such that sub is contained
within [start, end].",
numpy.char.rindex,"Like rfind, but raises ValueError when the substring sub is
not found.",
numpy.char.startswith,"Returns a boolean array which is True where the string element
in a starts with prefix, otherwise False.",
numpy.char.str_len,Return len(a) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s1"">'Grace Hopper Conference'</span><span class=""p"">,</span> <span class=""s1"">'Open Source Day'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">str_len</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([23, 15])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""sa"">u</span><span class=""s1"">'Р'</span><span class=""p"">,</span> <span class=""sa"">u</span><span class=""s1"">'о'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">str_len</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([1, 1])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""s1"">'hello'</span><span class=""p"">,</span> <span class=""s1"">'world'</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""sa"">u</span><span class=""s1"">'Р'</span><span class=""p"">,</span> <span class=""sa"">u</span><span class=""s1"">'о'</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">char</span><span class=""o"">.</span><span class=""n"">str_len</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[5, 5], [1, 1]])</span>
</pre>"
numpy.char.array,Create a chararray.,
numpy.char.asarray,"Convert the input to a chararray, copying the data only if
necessary.",
numpy.char.chararray,Provides a convenient view on arrays of string and unicode values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">charar</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">chararray</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">charar</span><span class=""p"">[:]</span> <span class=""o"">=</span> <span class=""s1"">'a'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">charar</span>
<span class=""go"">chararray([[b'a', b'a', b'a'],</span>
<span class=""go"">           [b'a', b'a', b'a'],</span>
<span class=""go"">           [b'a', b'a', b'a']], dtype='|S1')</span>
</pre>"
C-Types Foreign Function Interface (numpy.ctypeslib),Create a numpy array from a ctypes array or POINTER.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">lib</span> <span class=""o"">=</span> <span class=""n"">ctypes</span><span class=""o"">.</span><span class=""n"">cdll</span><span class=""p"">[</span><span class=""o"">&lt;</span><span class=""n"">full_path_name</span><span class=""o"">&gt;</span><span class=""p"">]</span> 
</pre>"
numpy.datetime_as_string,Convert an array of datetimes into an array of strings.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">pytz</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">d</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""s1"">'2002-10-27T04:30'</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""o"">*</span><span class=""mi"">60</span><span class=""p"">,</span> <span class=""mi"">60</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'M8[m]'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">d</span>
<span class=""go"">array(['2002-10-27T04:30', '2002-10-27T05:30', '2002-10-27T06:30',</span>
<span class=""go"">       '2002-10-27T07:30'], dtype='datetime64[m]')</span>
</pre>"
numpy.datetime_data,Get information about the step size of a date or time type.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt_25s</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">(</span><span class=""s1"">'timedelta64[25s]'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">datetime_data</span><span class=""p"">(</span><span class=""n"">dt_25s</span><span class=""p"">)</span>
<span class=""go"">('s', 25)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""n"">dt_25s</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">astype</span><span class=""p"">(</span><span class=""s1"">'timedelta64[s]'</span><span class=""p"">)</span>
<span class=""go"">array(250, dtype='timedelta64[s]')</span>
</pre>"
numpy.busdaycalendar,"A business day calendar object that efficiently stores information
defining valid days for the busday family of functions.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Some important days in July</span>
<span class=""gp"">... </span><span class=""n"">bdd</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busdaycalendar</span><span class=""p"">(</span>
<span class=""gp"">... </span>            <span class=""n"">holidays</span><span class=""o"">=</span><span class=""p"">[</span><span class=""s1"">'2011-07-01'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-04'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-17'</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Default is Monday to Friday weekdays</span>
<span class=""gp"">... </span><span class=""n"">bdd</span><span class=""o"">.</span><span class=""n"">weekmask</span>
<span class=""go"">array([ True,  True,  True,  True,  True, False, False])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Any holidays already on the weekend are removed</span>
<span class=""gp"">... </span><span class=""n"">bdd</span><span class=""o"">.</span><span class=""n"">holidays</span>
<span class=""go"">array(['2011-07-01', '2011-07-04'], dtype='datetime64[D]')</span>
</pre>"
numpy.is_busday,"Calculates which of the given dates are valid days, and which are not.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># The weekdays are Friday, Saturday, and Monday</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">is_busday</span><span class=""p"">([</span><span class=""s1"">'2011-07-01'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-02'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-18'</span><span class=""p"">],</span>
<span class=""gp"">... </span>                <span class=""n"">holidays</span><span class=""o"">=</span><span class=""p"">[</span><span class=""s1"">'2011-07-01'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-04'</span><span class=""p"">,</span> <span class=""s1"">'2011-07-17'</span><span class=""p"">])</span>
<span class=""go"">array([False, False,  True])</span>
</pre>"
numpy.busday_offset,"First adjusts the date to fall on a valid day according to
the roll rule, then applies offsets to the given dates
counted in valid days.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># First business day in October 2011 (not accounting for holidays)</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_offset</span><span class=""p"">(</span><span class=""s1"">'2011-10'</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""n"">roll</span><span class=""o"">=</span><span class=""s1"">'forward'</span><span class=""p"">)</span>
<span class=""go"">numpy.datetime64('2011-10-03')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Last business day in February 2012 (not accounting for holidays)</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_offset</span><span class=""p"">(</span><span class=""s1"">'2012-03'</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">roll</span><span class=""o"">=</span><span class=""s1"">'forward'</span><span class=""p"">)</span>
<span class=""go"">numpy.datetime64('2012-02-29')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Third Wednesday in January 2011</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_offset</span><span class=""p"">(</span><span class=""s1"">'2011-01'</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""n"">roll</span><span class=""o"">=</span><span class=""s1"">'forward'</span><span class=""p"">,</span> <span class=""n"">weekmask</span><span class=""o"">=</span><span class=""s1"">'Wed'</span><span class=""p"">)</span>
<span class=""go"">numpy.datetime64('2011-01-19')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># 2012 Mother's Day in Canada and the U.S.</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_offset</span><span class=""p"">(</span><span class=""s1"">'2012-05'</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">roll</span><span class=""o"">=</span><span class=""s1"">'forward'</span><span class=""p"">,</span> <span class=""n"">weekmask</span><span class=""o"">=</span><span class=""s1"">'Sun'</span><span class=""p"">)</span>
<span class=""go"">numpy.datetime64('2012-05-13')</span>
</pre>"
numpy.busday_count,"Counts the number of valid days between begindates and
enddates, not including the day of enddates.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Number of weekdays in January 2011</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_count</span><span class=""p"">(</span><span class=""s1"">'2011-01'</span><span class=""p"">,</span> <span class=""s1"">'2011-02'</span><span class=""p"">)</span>
<span class=""go"">21</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Number of weekdays in 2011</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_count</span><span class=""p"">(</span><span class=""s1"">'2011'</span><span class=""p"">,</span> <span class=""s1"">'2012'</span><span class=""p"">)</span>
<span class=""go"">260</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># Number of Saturdays in 2011</span>
<span class=""gp"">... </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">busday_count</span><span class=""p"">(</span><span class=""s1"">'2011'</span><span class=""p"">,</span> <span class=""s1"">'2012'</span><span class=""p"">,</span> <span class=""n"">weekmask</span><span class=""o"">=</span><span class=""s1"">'Sat'</span><span class=""p"">)</span>
<span class=""go"">53</span>
</pre>"
numpy.can_cast,"Returns True if cast between data types can occur according to the
casting rule.  If from is a scalar or array scalar, also returns
True if the scalar value can be cast without overflow or truncation
to an integer.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">can_cast</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">can_cast</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float64</span><span class=""p"">,</span> <span class=""nb"">complex</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">can_cast</span><span class=""p"">(</span><span class=""nb"">complex</span><span class=""p"">,</span> <span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.promote_types,"Returns the data type with the smallest size and smallest scalar
kind to which both type1 and type2 may be safely cast.
The returned data type is always considered “canonical”, this mainly
means that the promoted dtype will always be in native byte order.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">promote_types</span><span class=""p"">(</span><span class=""s1"">'f4'</span><span class=""p"">,</span> <span class=""s1"">'f8'</span><span class=""p"">)</span>
<span class=""go"">dtype('float64')</span>
</pre>"
numpy.min_scalar_type,"For scalar a, returns the data type with the smallest size
and smallest scalar kind which can hold its value.  For non-scalar
array a, returns the vector’s dtype unmodified.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">min_scalar_type</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""go"">dtype('uint8')</span>
</pre>"
numpy.result_type,"Returns the type that results from applying the NumPy
type promotion rules to the arguments.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">result_type</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">7</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'i1'</span><span class=""p"">))</span>
<span class=""go"">dtype('int8')</span>
</pre>"
numpy.common_type,Return a scalar type which is common to the input arrays.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">common_type</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">))</span>
<span class=""go"">&lt;class 'numpy.float32'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">common_type</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">&lt;class 'numpy.float64'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">common_type</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">45</span><span class=""p"">,</span> <span class=""mf"">6.</span><span class=""n"">j</span><span class=""p"">]),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">45.0</span><span class=""p"">]))</span>
<span class=""go"">&lt;class 'numpy.complex128'&gt;</span>
</pre>"
numpy.obj2sctype,Return the scalar dtype or NumPy equivalent of Python type of an object.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">obj2sctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">)</span>
<span class=""go"">&lt;class 'numpy.int32'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">obj2sctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""mf"">2.</span><span class=""p"">]))</span>
<span class=""go"">&lt;class 'numpy.float64'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">obj2sctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.</span><span class=""n"">j</span><span class=""p"">]))</span>
<span class=""go"">&lt;class 'numpy.complex128'&gt;</span>
</pre>"
numpy.dtype,Create a data type object.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int16</span><span class=""p"">)</span>
<span class=""go"">dtype('int16')</span>
</pre>"
numpy.format_parser,"Class to convert formats, names, titles description to a dtype.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_parser</span><span class=""p"">([</span><span class=""s1"">'&lt;f8'</span><span class=""p"">,</span> <span class=""s1"">'&lt;i4'</span><span class=""p"">,</span> <span class=""s1"">'&lt;a5'</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""s1"">'col1'</span><span class=""p"">,</span> <span class=""s1"">'col2'</span><span class=""p"">,</span> <span class=""s1"">'col3'</span><span class=""p"">],</span>
<span class=""gp"">... </span>                 <span class=""p"">[</span><span class=""s1"">'T1'</span><span class=""p"">,</span> <span class=""s1"">'T2'</span><span class=""p"">,</span> <span class=""s1"">'T3'</span><span class=""p"">])</span><span class=""o"">.</span><span class=""n"">dtype</span>
<span class=""go"">dtype([(('T1', 'col1'), '&lt;f8'), (('T2', 'col2'), '&lt;i4'), (('T3', 'col3'), 'S5')])</span>
</pre>"
numpy.finfo,Machine limits for floating point types.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">finfo</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float64</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">dtype</span>
<span class=""go"">dtype('float64')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">finfo</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">complex64</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">dtype</span>
<span class=""go"">dtype('float32')</span>
</pre>"
numpy.iinfo,Machine limits for integer types.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii16</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iinfo</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int16</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii16</span><span class=""o"">.</span><span class=""n"">min</span>
<span class=""go"">-32768</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii16</span><span class=""o"">.</span><span class=""n"">max</span>
<span class=""go"">32767</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii32</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iinfo</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii32</span><span class=""o"">.</span><span class=""n"">min</span>
<span class=""go"">-2147483648</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ii32</span><span class=""o"">.</span><span class=""n"">max</span>
<span class=""go"">2147483647</span>
</pre>"
numpy.issctype,Determines whether the given object represents a scalar data-type.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issctype</span><span class=""p"">(</span><span class=""nb"">list</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issctype</span><span class=""p"">(</span><span class=""mf"">1.1</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.issubdtype,Returns True if first argument is a typecode lower/equal in type hierarchy.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ints</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubdtype</span><span class=""p"">(</span><span class=""n"">ints</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">integer</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubdtype</span><span class=""p"">(</span><span class=""n"">ints</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">floating</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.issubsctype,Determine if the first argument is a subclass of the second argument.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubsctype</span><span class=""p"">(</span><span class=""s1"">'S8'</span><span class=""p"">,</span> <span class=""nb"">str</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubsctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">]),</span> <span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubsctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">]),</span> <span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.issubclass_,Determine if a class is a subclass of a second class.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubclass_</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">,</span> <span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubclass_</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">,</span> <span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">issubclass_</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float64</span><span class=""p"">,</span> <span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.find_common_type,Determine common type following standard coercion rules.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">find_common_type</span><span class=""p"">([],</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">,</span> <span class=""nb"">complex</span><span class=""p"">])</span>
<span class=""go"">dtype('complex128')</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">find_common_type</span><span class=""p"">([</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">],</span> <span class=""p"">[])</span>
<span class=""go"">dtype('float64')</span>
</pre>"
numpy.typename,Return a description for the given data type code.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">typechars</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""s1"">'S1'</span><span class=""p"">,</span> <span class=""s1"">'?'</span><span class=""p"">,</span> <span class=""s1"">'B'</span><span class=""p"">,</span> <span class=""s1"">'D'</span><span class=""p"">,</span> <span class=""s1"">'G'</span><span class=""p"">,</span> <span class=""s1"">'F'</span><span class=""p"">,</span> <span class=""s1"">'I'</span><span class=""p"">,</span> <span class=""s1"">'H'</span><span class=""p"">,</span> <span class=""s1"">'L'</span><span class=""p"">,</span> <span class=""s1"">'O'</span><span class=""p"">,</span> <span class=""s1"">'Q'</span><span class=""p"">,</span>
<span class=""gp"">... </span>             <span class=""s1"">'S'</span><span class=""p"">,</span> <span class=""s1"">'U'</span><span class=""p"">,</span> <span class=""s1"">'V'</span><span class=""p"">,</span> <span class=""s1"">'b'</span><span class=""p"">,</span> <span class=""s1"">'d'</span><span class=""p"">,</span> <span class=""s1"">'g'</span><span class=""p"">,</span> <span class=""s1"">'f'</span><span class=""p"">,</span> <span class=""s1"">'i'</span><span class=""p"">,</span> <span class=""s1"">'h'</span><span class=""p"">,</span> <span class=""s1"">'l'</span><span class=""p"">,</span> <span class=""s1"">'q'</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">for</span> <span class=""n"">typechar</span> <span class=""ow"">in</span> <span class=""n"">typechars</span><span class=""p"">:</span>
<span class=""gp"">... </span>    <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">typechar</span><span class=""p"">,</span> <span class=""s1"">' : '</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">typename</span><span class=""p"">(</span><span class=""n"">typechar</span><span class=""p"">))</span>
<span class=""gp"">...</span>
<span class=""go"">S1  :  character</span>
<span class=""go"">?  :  bool</span>
<span class=""go"">B  :  unsigned char</span>
<span class=""go"">D  :  complex double precision</span>
<span class=""go"">G  :  complex long double precision</span>
<span class=""go"">F  :  complex single precision</span>
<span class=""go"">I  :  unsigned integer</span>
<span class=""go"">H  :  unsigned short</span>
<span class=""go"">L  :  unsigned long integer</span>
<span class=""go"">O  :  object</span>
<span class=""go"">Q  :  unsigned long long integer</span>
<span class=""go"">S  :  string</span>
<span class=""go"">U  :  unicode</span>
<span class=""go"">V  :  void</span>
<span class=""go"">b  :  signed char</span>
<span class=""go"">d  :  double precision</span>
<span class=""go"">g  :  long precision</span>
<span class=""go"">f  :  single precision</span>
<span class=""go"">i  :  integer</span>
<span class=""go"">h  :  short</span>
<span class=""go"">l  :  long integer</span>
<span class=""go"">q  :  long long integer</span>
</pre>"
numpy.sctype2char,Return the string representation of a scalar dtype.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">for</span> <span class=""n"">sctype</span> <span class=""ow"">in</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">double</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">complex_</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">string_</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ndarray</span><span class=""p"">]:</span>
<span class=""gp"">... </span>    <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">sctype2char</span><span class=""p"">(</span><span class=""n"">sctype</span><span class=""p"">))</span>
<span class=""go"">l # may vary</span>
<span class=""go"">d</span>
<span class=""go"">D</span>
<span class=""go"">S</span>
<span class=""go"">O</span>
</pre>"
numpy.mintypecode,"Return the character for the minimum-size type to which given types can
be safely cast.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mintypecode</span><span class=""p"">([</span><span class=""s1"">'d'</span><span class=""p"">,</span> <span class=""s1"">'f'</span><span class=""p"">,</span> <span class=""s1"">'S'</span><span class=""p"">])</span>
<span class=""go"">'d'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""o"">-</span><span class=""mf"">3.</span><span class=""n"">j</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mintypecode</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">'D'</span>
</pre>"
numpy.maximum_sctype,Return the scalar type of highest precision of the same kind as the input.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">maximum_sctype</span><span class=""p"">(</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""go"">&lt;class 'numpy.int64'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">maximum_sctype</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">uint8</span><span class=""p"">)</span>
<span class=""go"">&lt;class 'numpy.uint64'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">maximum_sctype</span><span class=""p"">(</span><span class=""nb"">complex</span><span class=""p"">)</span>
<span class=""go"">&lt;class 'numpy.complex256'&gt; # may vary</span>
</pre>"
numpy.emath.sqrt,Compute the square root of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">emath</span><span class=""o"">.</span><span class=""n"">sqrt</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">1.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">emath</span><span class=""o"">.</span><span class=""n"">sqrt</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">])</span>
<span class=""go"">array([1.,  2.])</span>
</pre>"
numpy.emath.log,Compute the natural logarithm of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">emath</span><span class=""o"">.</span><span class=""n"">log</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">exp</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">))</span>
<span class=""go"">1.0</span>
</pre>"
numpy.emath.log2,Compute the logarithm base 2 of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.logn,Take log base n of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.log10,Compute the logarithm base 10 of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.power,"Return x to the power p, (x**p).","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.arccos,Compute the inverse cosine of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.arcsin,Compute the inverse sine of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.emath.arctanh,Compute the inverse hyperbolic tangent of x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
</pre>"
numpy.seterr,Set how floating-point errors are handled.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">old_settings</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">seterr</span><span class=""p"">(</span><span class=""nb"">all</span><span class=""o"">=</span><span class=""s1"">'ignore'</span><span class=""p"">)</span>  <span class=""c1"">#seterr to known value</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">seterr</span><span class=""p"">(</span><span class=""n"">over</span><span class=""o"">=</span><span class=""s1"">'raise'</span><span class=""p"">)</span>
<span class=""go"">{'divide': 'ignore', 'over': 'ignore', 'under': 'ignore', 'invalid': 'ignore'}</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">seterr</span><span class=""p"">(</span><span class=""o"">**</span><span class=""n"">old_settings</span><span class=""p"">)</span>  <span class=""c1""># reset to default</span>
<span class=""go"">{'divide': 'ignore', 'over': 'raise', 'under': 'ignore', 'invalid': 'ignore'}</span>
</pre>"
numpy.geterr,Get the current way of handling floating-point errors.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geterr</span><span class=""p"">()</span>
<span class=""go"">{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">3.</span><span class=""p"">)</span> <span class=""o"">/</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">3.</span><span class=""p"">)</span>
<span class=""go"">array([nan,  1.,  1.])</span>
</pre>"
numpy.seterrcall,Set the floating-point error callback function or log object.,"<pre><span></span><span class=""p"">[</span><span class=""mi"">0</span> <span class=""mi"">0</span> <span class=""mi"">0</span> <span class=""mi"">0</span> <span class=""n"">divide</span> <span class=""n"">over</span> <span class=""n"">under</span> <span class=""n"">invalid</span><span class=""p"">]</span>
</pre>"
numpy.geterrcall,Return the current callback function used on floating-point errors.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geterrcall</span><span class=""p"">()</span>  <span class=""c1""># we did not yet set a handler, returns None</span>
</pre>"
numpy.errstate,Context manager for floating-point error handling.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">olderr</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">seterr</span><span class=""p"">(</span><span class=""nb"">all</span><span class=""o"">=</span><span class=""s1"">'ignore'</span><span class=""p"">)</span>  <span class=""c1""># Set error handling to known state.</span>
</pre>"
numpy.seterrobj,Set the object that defines floating-point error handling.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">old_errobj</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geterrobj</span><span class=""p"">()</span>  <span class=""c1""># first get the defaults</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">old_errobj</span>
<span class=""go"">[8192, 521, None]</span>
</pre>"
numpy.geterrobj,Return the current object that defines floating-point error handling.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">geterrobj</span><span class=""p"">()</span>  <span class=""c1""># first get the defaults</span>
<span class=""go"">[8192, 521, None]</span>
</pre>"
numpy.fft.fft,Compute the one-dimensional discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">exp</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""n"">j</span> <span class=""o"">*</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">pi</span> <span class=""o"">*</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">8</span><span class=""p"">)</span> <span class=""o"">/</span> <span class=""mi"">8</span><span class=""p"">))</span>
<span class=""go"">array([-2.33486982e-16+1.14423775e-17j,  8.00000000e+00-1.25557246e-15j,</span>
<span class=""go"">        2.33486982e-16+2.33486982e-16j,  0.00000000e+00+1.22464680e-16j,</span>
<span class=""go"">       -1.14423775e-17+2.33486982e-16j,  0.00000000e+00+5.20784380e-16j,</span>
<span class=""go"">        1.14423775e-17+1.14423775e-17j,  0.00000000e+00+1.22464680e-16j])</span>
</pre>"
numpy.fft.ifft,Compute the one-dimensional inverse discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifft</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">array([ 1.+0.j,  0.+1.j, -1.+0.j,  0.-1.j]) # may vary</span>
</pre>"
numpy.fft.fft2,Compute the 2-dimensional discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[:</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">][</span><span class=""mi"">0</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fft2</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        , # may vary</span>
<span class=""go"">          0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ,</span>
<span class=""go"">          0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,</span>
<span class=""go"">          0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,</span>
<span class=""go"">          0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ,</span>
<span class=""go"">          0.  +0.j        ,   0.  +0.j        ]])</span>
</pre>"
numpy.fft.ifft2,Compute the 2-dimensional inverse discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""mi"">4</span> <span class=""o"">*</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifft2</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary</span>
<span class=""go"">       [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],</span>
<span class=""go"">       [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],</span>
<span class=""go"">       [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]])</span>
</pre>"
numpy.fft.fftn,Compute the N-dimensional discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[:</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""p"">:</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""p"">:</span><span class=""mi"">3</span><span class=""p"">][</span><span class=""mi"">0</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftn</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">array([[[ 0.+0.j,   0.+0.j,   0.+0.j], # may vary</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j],</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j]],</span>
<span class=""go"">       [[ 9.+0.j,   0.+0.j,   0.+0.j],</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j],</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j]],</span>
<span class=""go"">       [[18.+0.j,   0.+0.j,   0.+0.j],</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j],</span>
<span class=""go"">        [ 0.+0.j,   0.+0.j,   0.+0.j]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftn</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">),</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">))</span>
<span class=""go"">array([[[ 2.+0.j,  2.+0.j,  2.+0.j], # may vary</span>
<span class=""go"">        [ 0.+0.j,  0.+0.j,  0.+0.j]],</span>
<span class=""go"">       [[-2.+0.j, -2.+0.j, -2.+0.j],</span>
<span class=""go"">        [ 0.+0.j,  0.+0.j,  0.+0.j]]])</span>
</pre>"
numpy.fft.ifftn,Compute the N-dimensional inverse discrete Fourier Transform.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifftn</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftn</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">,)),</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,))</span>
<span class=""go"">array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary</span>
<span class=""go"">       [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],</span>
<span class=""go"">       [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],</span>
<span class=""go"">       [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])</span>
</pre>"
numpy.fft.rfft,Compute the one-dimensional discrete Fourier Transform for real input.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">array([ 1.+0.j,  0.-1.j, -1.+0.j,  0.+1.j]) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">rfft</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">array([ 1.+0.j,  0.-1.j, -1.+0.j]) # may vary</span>
</pre>"
numpy.fft.irfft,Computes the inverse of rfft.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifft</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""n"">j</span><span class=""p"">])</span>
<span class=""go"">array([0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">irfft</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">])</span>
<span class=""go"">array([0.,  1.,  0.,  0.])</span>
</pre>"
numpy.fft.rfft2,Compute the 2-dimensional FFT of a real array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[:</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">][</span><span class=""mi"">0</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">rfft2</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ],</span>
<span class=""go"">       [-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ]])</span>
</pre>"
numpy.fft.irfft2,Computes the inverse of rfft2.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">mgrid</span><span class=""p"">[:</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""p"">:</span><span class=""mi"">5</span><span class=""p"">][</span><span class=""mi"">0</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">rfft2</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">irfft2</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">,</span> <span class=""n"">s</span><span class=""o"">=</span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">)</span>
<span class=""go"">array([[0., 0., 0., 0., 0.],</span>
<span class=""go"">       [1., 1., 1., 1., 1.],</span>
<span class=""go"">       [2., 2., 2., 2., 2.],</span>
<span class=""go"">       [3., 3., 3., 3., 3.],</span>
<span class=""go"">       [4., 4., 4., 4., 4.]])</span>
</pre>"
numpy.fft.rfftn,Compute the N-dimensional discrete Fourier Transform for real input.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">rfftn</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[[8.+0.j,  0.+0.j], # may vary</span>
<span class=""go"">        [0.+0.j,  0.+0.j]],</span>
<span class=""go"">       [[0.+0.j,  0.+0.j],</span>
<span class=""go"">        [0.+0.j,  0.+0.j]]])</span>
</pre>"
numpy.fft.irfftn,Computes the inverse of rfftn.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">3</span> <span class=""o"">*</span> <span class=""mi"">2</span> <span class=""o"">*</span> <span class=""mi"">2</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">irfftn</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[[1.,  1.],</span>
<span class=""go"">        [1.,  1.]],</span>
<span class=""go"">       [[1.,  1.],</span>
<span class=""go"">        [1.,  1.]],</span>
<span class=""go"">       [[1.,  1.],</span>
<span class=""go"">        [1.,  1.]]])</span>
</pre>"
numpy.fft.hfft,"Compute the FFT of a signal that has Hermitian symmetry, i.e., a real
spectrum.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">signal</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""p"">(</span><span class=""n"">signal</span><span class=""p"">)</span>
<span class=""go"">array([15.+0.j,  -4.+0.j,   0.+0.j,  -1.-0.j,   0.+0.j,  -4.+0.j]) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">hfft</span><span class=""p"">(</span><span class=""n"">signal</span><span class=""p"">[:</span><span class=""mi"">4</span><span class=""p"">])</span> <span class=""c1""># Input first half of signal</span>
<span class=""go"">array([15.,  -4.,   0.,  -1.,   0.,  -4.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">hfft</span><span class=""p"">(</span><span class=""n"">signal</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span>  <span class=""c1""># Input entire signal and truncate</span>
<span class=""go"">array([15.,  -4.,   0.,  -1.,   0.,  -4.])</span>
</pre>"
numpy.fft.ihfft,Compute the inverse FFT of a signal that has Hermitian symmetry.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">spectrum</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span> <span class=""mi"">15</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">4</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifft</span><span class=""p"">(</span><span class=""n"">spectrum</span><span class=""p"">)</span>
<span class=""go"">array([1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  3.+0.j,  2.+0.j]) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ihfft</span><span class=""p"">(</span><span class=""n"">spectrum</span><span class=""p"">)</span>
<span class=""go"">array([ 1.-0.j,  2.-0.j,  3.-0.j,  4.-0.j]) # may vary</span>
</pre>"
numpy.fft.fftfreq,Return the Discrete Fourier Transform sample frequencies.,"<pre><span></span><span class=""n"">f</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span>   <span class=""n"">n</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span>     <span class=""o"">-</span><span class=""n"">n</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">/</span> <span class=""p"">(</span><span class=""n"">d</span><span class=""o"">*</span><span class=""n"">n</span><span class=""p"">)</span>   <span class=""k"">if</span> <span class=""n"">n</span> <span class=""ow"">is</span> <span class=""n"">even</span>
<span class=""n"">f</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""n"">n</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""p"">(</span><span class=""n"">n</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">/</span> <span class=""p"">(</span><span class=""n"">d</span><span class=""o"">*</span><span class=""n"">n</span><span class=""p"">)</span>   <span class=""k"">if</span> <span class=""n"">n</span> <span class=""ow"">is</span> <span class=""n"">odd</span>
</pre>"
numpy.fft.rfftfreq,"Return the Discrete Fourier Transform sample frequencies
(for usage with rfft, irfft).","<pre><span></span><span class=""n"">f</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span>     <span class=""n"">n</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span>     <span class=""n"">n</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""p"">]</span> <span class=""o"">/</span> <span class=""p"">(</span><span class=""n"">d</span><span class=""o"">*</span><span class=""n"">n</span><span class=""p"">)</span>   <span class=""k"">if</span> <span class=""n"">n</span> <span class=""ow"">is</span> <span class=""n"">even</span>
<span class=""n"">f</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">...</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""n"">n</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""n"">n</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">/</span><span class=""mi"">2</span><span class=""p"">]</span> <span class=""o"">/</span> <span class=""p"">(</span><span class=""n"">d</span><span class=""o"">*</span><span class=""n"">n</span><span class=""p"">)</span>   <span class=""k"">if</span> <span class=""n"">n</span> <span class=""ow"">is</span> <span class=""n"">odd</span>
</pre>"
numpy.fft.fftshift,Shift the zero-frequency component to the center of the spectrum.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">freqs</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftfreq</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""mf"">0.1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">freqs</span>
<span class=""go"">array([ 0.,  1.,  2., ..., -3., -2., -1.])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftshift</span><span class=""p"">(</span><span class=""n"">freqs</span><span class=""p"">)</span>
<span class=""go"">array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])</span>
</pre>"
numpy.fft.ifftshift,"The inverse of fftshift. Although identical for even-length x, the
functions differ by one sample for odd-length x.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">freqs</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftfreq</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""n"">d</span><span class=""o"">=</span><span class=""mf"">1.</span><span class=""o"">/</span><span class=""mi"">9</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">freqs</span>
<span class=""go"">array([[ 0.,  1.,  2.],</span>
<span class=""go"">       [ 3.,  4., -4.],</span>
<span class=""go"">       [-3., -2., -1.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">ifftshift</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fft</span><span class=""o"">.</span><span class=""n"">fftshift</span><span class=""p"">(</span><span class=""n"">freqs</span><span class=""p"">))</span>
<span class=""go"">array([[ 0.,  1.,  2.],</span>
<span class=""go"">       [ 3.,  4., -4.],</span>
<span class=""go"">       [-3., -2., -1.]])</span>
</pre>"
numpy.apply_along_axis,Apply a function to 1-D slices along the given axis.,"<pre><span></span><span class=""n"">Ni</span><span class=""p"">,</span> <span class=""n"">Nk</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">[:</span><span class=""n"">axis</span><span class=""p"">],</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">[</span><span class=""n"">axis</span><span class=""o"">+</span><span class=""mi"">1</span><span class=""p"">:]</span>
<span class=""k"">for</span> <span class=""n"">ii</span> <span class=""ow"">in</span> <span class=""n"">ndindex</span><span class=""p"">(</span><span class=""n"">Ni</span><span class=""p"">):</span>
    <span class=""k"">for</span> <span class=""n"">kk</span> <span class=""ow"">in</span> <span class=""n"">ndindex</span><span class=""p"">(</span><span class=""n"">Nk</span><span class=""p"">):</span>
        <span class=""n"">f</span> <span class=""o"">=</span> <span class=""n"">func1d</span><span class=""p"">(</span><span class=""n"">arr</span><span class=""p"">[</span><span class=""n"">ii</span> <span class=""o"">+</span> <span class=""n"">s_</span><span class=""p"">[:,]</span> <span class=""o"">+</span> <span class=""n"">kk</span><span class=""p"">])</span>
        <span class=""n"">Nj</span> <span class=""o"">=</span> <span class=""n"">f</span><span class=""o"">.</span><span class=""n"">shape</span>
        <span class=""k"">for</span> <span class=""n"">jj</span> <span class=""ow"">in</span> <span class=""n"">ndindex</span><span class=""p"">(</span><span class=""n"">Nj</span><span class=""p"">):</span>
            <span class=""n"">out</span><span class=""p"">[</span><span class=""n"">ii</span> <span class=""o"">+</span> <span class=""n"">jj</span> <span class=""o"">+</span> <span class=""n"">kk</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">f</span><span class=""p"">[</span><span class=""n"">jj</span><span class=""p"">]</span>
</pre>"
numpy.apply_over_axes,Apply a function repeatedly over multiple axes.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">24</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[[ 0,  1,  2,  3],</span>
<span class=""go"">        [ 4,  5,  6,  7],</span>
<span class=""go"">        [ 8,  9, 10, 11]],</span>
<span class=""go"">       [[12, 13, 14, 15],</span>
<span class=""go"">        [16, 17, 18, 19],</span>
<span class=""go"">        [20, 21, 22, 23]]])</span>
</pre>"
numpy.vectorize,Generalized function class.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">def</span> <span class=""nf"">myfunc</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">):</span>
<span class=""gp"">... </span>    <span class=""s2"">""Return a-b if a&gt;b, otherwise return a+b""</span>
<span class=""gp"">... </span>    <span class=""k"">if</span> <span class=""n"">a</span> <span class=""o"">&gt;</span> <span class=""n"">b</span><span class=""p"">:</span>
<span class=""gp"">... </span>        <span class=""k"">return</span> <span class=""n"">a</span> <span class=""o"">-</span> <span class=""n"">b</span>
<span class=""gp"">... </span>    <span class=""k"">else</span><span class=""p"">:</span>
<span class=""gp"">... </span>        <span class=""k"">return</span> <span class=""n"">a</span> <span class=""o"">+</span> <span class=""n"">b</span>
</pre>"
numpy.frompyfunc,Takes an arbitrary Python function and returns a NumPy ufunc.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">oct_array</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">frompyfunc</span><span class=""p"">(</span><span class=""nb"">oct</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">oct_array</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">10</span><span class=""p"">,</span> <span class=""mi"">30</span><span class=""p"">,</span> <span class=""mi"">100</span><span class=""p"">)))</span>
<span class=""go"">array(['0o12', '0o36', '0o144'], dtype=object)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""nb"">oct</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">),</span> <span class=""nb"">oct</span><span class=""p"">(</span><span class=""mi"">30</span><span class=""p"">),</span> <span class=""nb"">oct</span><span class=""p"">(</span><span class=""mi"">100</span><span class=""p"">)))</span> <span class=""c1""># for comparison</span>
<span class=""go"">array(['0o12', '0o36', '0o144'], dtype='&lt;U5')</span>
</pre>"
numpy.piecewise,Evaluate a piecewise-defined function.,"<pre><span></span>      <span class=""o"">|--</span>
      <span class=""o"">|</span><span class=""n"">funclist</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">](</span><span class=""n"">x</span><span class=""p"">[</span><span class=""n"">condlist</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]])</span>
<span class=""n"">out</span> <span class=""o"">=</span> <span class=""o"">|</span><span class=""n"">funclist</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">](</span><span class=""n"">x</span><span class=""p"">[</span><span class=""n"">condlist</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]])</span>
      <span class=""o"">|...</span>
      <span class=""o"">|</span><span class=""n"">funclist</span><span class=""p"">[</span><span class=""n"">n2</span><span class=""p"">](</span><span class=""n"">x</span><span class=""p"">[</span><span class=""n"">condlist</span><span class=""p"">[</span><span class=""n"">n2</span><span class=""p"">]])</span>
      <span class=""o"">|--</span>
</pre>"
numpy.lookfor,Do a keyword search on docstrings.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">lookfor</span><span class=""p"">(</span><span class=""s1"">'binary representation'</span><span class=""p"">)</span> 
<span class=""go"">Search results for 'binary representation'</span>
<span class=""go"">------------------------------------------</span>
<span class=""go"">numpy.binary_repr</span>
<span class=""go"">    Return the binary representation of the input number as a string.</span>
<span class=""go"">numpy.core.setup_common.long_double_representation</span>
<span class=""go"">    Given a binary dump as given by GNU od -b, look for long double</span>
<span class=""go"">numpy.base_repr</span>
<span class=""go"">    Return a string representation of a number in the given base system.</span>
<span class=""gp"">...</span>
</pre>"
numpy.info,"Get help information for a function, class, or module.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">info</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">polyval</span><span class=""p"">)</span> 
<span class=""go"">   polyval(p, x)</span>
<span class=""go"">     Evaluate the polynomial p at x.</span>
<span class=""go"">     ...</span>
</pre>"
numpy.source,Print or write to a file the source code for a NumPy object.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">source</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">interp</span><span class=""p"">)</span>                        
<span class=""go"">In file: /usr/lib/python2.6/dist-packages/numpy/lib/function_base.py</span>
<span class=""go"">def interp(x, xp, fp, left=None, right=None):</span>
<span class=""go"">    """""".... (full docstring printed)""""""</span>
<span class=""go"">    if isinstance(x, (float, int, number)):</span>
<span class=""go"">        return compiled_interp([x], xp, fp, left, right).item()</span>
<span class=""go"">    else:</span>
<span class=""go"">        return compiled_interp(x, xp, fp, left, right)</span>
</pre>"
numpy.load,"Load arrays or pickled objects from .npy, .npz or pickled files.","<pre><span></span><span class=""k"">with</span> <span class=""n"">load</span><span class=""p"">(</span><span class=""s1"">'foo.npz'</span><span class=""p"">)</span> <span class=""k"">as</span> <span class=""n"">data</span><span class=""p"">:</span>
    <span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">data</span><span class=""p"">[</span><span class=""s1"">'a'</span><span class=""p"">]</span>
</pre>"
numpy.save,Save an array to a binary file in NumPy .npy format.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">tempfile</span> <span class=""kn"">import</span> <span class=""n"">TemporaryFile</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">outfile</span> <span class=""o"">=</span> <span class=""n"">TemporaryFile</span><span class=""p"">()</span>
</pre>"
numpy.savez,Save several arrays into a single file in uncompressed .npz format.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">tempfile</span> <span class=""kn"">import</span> <span class=""n"">TemporaryFile</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">outfile</span> <span class=""o"">=</span> <span class=""n"">TemporaryFile</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">sin</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
</pre>"
numpy.savez_compressed,Save several arrays into a single file in compressed .npz format.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">test_array</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">rand</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">test_vector</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">rand</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">savez_compressed</span><span class=""p"">(</span><span class=""s1"">'/tmp/123'</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""o"">=</span><span class=""n"">test_array</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""o"">=</span><span class=""n"">test_vector</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">loaded</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">load</span><span class=""p"">(</span><span class=""s1"">'/tmp/123.npz'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">(</span><span class=""n"">test_array</span><span class=""p"">,</span> <span class=""n"">loaded</span><span class=""p"">[</span><span class=""s1"">'a'</span><span class=""p"">]))</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">(</span><span class=""n"">test_vector</span><span class=""p"">,</span> <span class=""n"">loaded</span><span class=""p"">[</span><span class=""s1"">'b'</span><span class=""p"">]))</span>
<span class=""go"">True</span>
</pre>"
numpy.loadtxt,Load data from a text file.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">io</span> <span class=""kn"">import</span> <span class=""n"">StringIO</span>   <span class=""c1""># StringIO behaves like a file object</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">StringIO</span><span class=""p"">(</span><span class=""s2"">""0 1</span><span class=""se"">\n</span><span class=""s2"">2 3""</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">loadtxt</span><span class=""p"">(</span><span class=""n"">c</span><span class=""p"">)</span>
<span class=""go"">array([[0., 1.],</span>
<span class=""go"">       [2., 3.]])</span>
</pre>"
numpy.savetxt,Save an array to a text file.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">z</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">0.0</span><span class=""p"">,</span><span class=""mf"">5.0</span><span class=""p"">,</span><span class=""mf"">1.0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">savetxt</span><span class=""p"">(</span><span class=""s1"">'test.out'</span><span class=""p"">,</span> <span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">delimiter</span><span class=""o"">=</span><span class=""s1"">','</span><span class=""p"">)</span>   <span class=""c1""># X is an array</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">savetxt</span><span class=""p"">(</span><span class=""s1"">'test.out'</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span><span class=""n"">y</span><span class=""p"">,</span><span class=""n"">z</span><span class=""p"">))</span>   <span class=""c1""># x,y,z equal sized 1D arrays</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">savetxt</span><span class=""p"">(</span><span class=""s1"">'test.out'</span><span class=""p"">,</span> <span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">fmt</span><span class=""o"">=</span><span class=""s1"">'</span><span class=""si"">%1.4e</span><span class=""s1"">'</span><span class=""p"">)</span>   <span class=""c1""># use exponential notation</span>
</pre>"
numpy.genfromtxt,"Load data from a text file, with missing values handled as specified.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">io</span> <span class=""kn"">import</span> <span class=""n"">StringIO</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy</span> <span class=""k"">as</span> <span class=""nn"">np</span>
</pre>"
numpy.fromregex,"Construct an array from a text file, using regular expression parsing.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">io</span> <span class=""kn"">import</span> <span class=""n"">StringIO</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">text</span> <span class=""o"">=</span> <span class=""n"">StringIO</span><span class=""p"">(</span><span class=""s2"">""1312 foo</span><span class=""se"">\n</span><span class=""s2"">1534  bar</span><span class=""se"">\n</span><span class=""s2"">444   qux""</span><span class=""p"">)</span>
</pre>"
numpy.fromstring,A new 1-D array initialized from text data in a string.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromstring</span><span class=""p"">(</span><span class=""s1"">'1 2'</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">,</span> <span class=""n"">sep</span><span class=""o"">=</span><span class=""s1"">' '</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromstring</span><span class=""p"">(</span><span class=""s1"">'1, 2'</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">,</span> <span class=""n"">sep</span><span class=""o"">=</span><span class=""s1"">','</span><span class=""p"">)</span>
<span class=""go"">array([1, 2])</span>
</pre>"
numpy.ndarray.tofile,Write array to a file as text or binary (default).,
numpy.ndarray.tolist,Return the array as an a.ndim-levels deep nested list of Python scalars.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">uint32</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a_list</span> <span class=""o"">=</span> <span class=""nb"">list</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a_list</span>
<span class=""go"">[1, 2]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">type</span><span class=""p"">(</span><span class=""n"">a_list</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">&lt;class 'numpy.uint32'&gt;</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a_tolist</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">tolist</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a_tolist</span>
<span class=""go"">[1, 2]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">type</span><span class=""p"">(</span><span class=""n"">a_tolist</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">&lt;class 'int'&gt;</span>
</pre>"
numpy.array2string,Return a string representation of an array.,"<pre><span></span><span class=""n"">prefix</span> <span class=""o"">+</span> <span class=""n"">array2string</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span> <span class=""o"">+</span> <span class=""n"">suffix</span>
</pre>"
numpy.array_repr,Return the string representation of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_repr</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">]))</span>
<span class=""go"">'array([1, 2])'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_repr</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">0.</span><span class=""p"">]))</span>
<span class=""go"">'MaskedArray([0.])'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_repr</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([],</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int32</span><span class=""p"">))</span>
<span class=""go"">'array([], dtype=int32)'</span>
</pre>"
numpy.array_str,Return a string representation of the data in an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_str</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">'[0 1 2]'</span>
</pre>"
numpy.format_float_positional,Format a floating-point scalar as a decimal string in positional notation.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_positional</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">pi</span><span class=""p"">))</span>
<span class=""go"">'3.1415927'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_positional</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float16</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">pi</span><span class=""p"">))</span>
<span class=""go"">'3.14'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_positional</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float16</span><span class=""p"">(</span><span class=""mf"">0.3</span><span class=""p"">))</span>
<span class=""go"">'0.3'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_positional</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float16</span><span class=""p"">(</span><span class=""mf"">0.3</span><span class=""p"">),</span> <span class=""n"">unique</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">,</span> <span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""go"">'0.3000488281'</span>
</pre>"
numpy.format_float_scientific,Format a floating-point scalar as a decimal string in scientific notation.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_scientific</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">pi</span><span class=""p"">))</span>
<span class=""go"">'3.1415927e+00'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">s</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">(</span><span class=""mf"">1.23e24</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_scientific</span><span class=""p"">(</span><span class=""n"">s</span><span class=""p"">,</span> <span class=""n"">unique</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">,</span> <span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">15</span><span class=""p"">)</span>
<span class=""go"">'1.230000071797338e+24'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">format_float_scientific</span><span class=""p"">(</span><span class=""n"">s</span><span class=""p"">,</span> <span class=""n"">exp_digits</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">'1.23e+0024'</span>
</pre>"
numpy.memmap,Create a memory-map to an array stored in a binary file on disk.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">data</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">12</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s1"">'float32'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">data</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
</pre>"
numpy.lib.format.open_memmap,Open a .npy file as a memory-mapped array.,
numpy.set_printoptions,Set printing options.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.123456789</span><span class=""p"">])</span>
<span class=""go"">[1.1235]</span>
</pre>"
numpy.get_printoptions,Return the current print options.,
numpy.set_string_function,Set a Python function to be used when pretty printing arrays.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">def</span> <span class=""nf"">pprint</span><span class=""p"">(</span><span class=""n"">arr</span><span class=""p"">):</span>
<span class=""gp"">... </span>    <span class=""k"">return</span> <span class=""s1"">'HA! - What are you going to do now?'</span>
<span class=""gp"">...</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">set_string_function</span><span class=""p"">(</span><span class=""n"">pprint</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">HA! - What are you going to do now?</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">_</span> <span class=""o"">=</span> <span class=""n"">a</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># [0 1 2 3 4 5 6 7 8 9]</span>
</pre>"
numpy.printoptions,Context manager for setting print options.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy.testing</span> <span class=""kn"">import</span> <span class=""n"">assert_equal</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">with</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">printoptions</span><span class=""p"">(</span><span class=""n"">precision</span><span class=""o"">=</span><span class=""mi"">2</span><span class=""p"">):</span>
<span class=""gp"">... </span>    <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">2.0</span><span class=""p"">])</span> <span class=""o"">/</span> <span class=""mi"">3</span>
<span class=""go"">array([0.67])</span>
</pre>"
numpy.binary_repr,Return the binary representation of the input number as a string.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">'11'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""o"">-</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">'-11'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">binary_repr</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""n"">width</span><span class=""o"">=</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""go"">'0011'</span>
</pre>"
numpy.base_repr,Return a string representation of a number in the given base system.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">base_repr</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">'101'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">base_repr</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">'11'</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">base_repr</span><span class=""p"">(</span><span class=""mi"">7</span><span class=""p"">,</span> <span class=""n"">base</span><span class=""o"">=</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""n"">padding</span><span class=""o"">=</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">'00012'</span>
</pre>"
numpy.DataSource,"A generic data source file (file, http, ftp, …).","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">repos</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">DataSource</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">repos</span><span class=""o"">.</span><span class=""n"">exists</span><span class=""p"">(</span><span class=""s1"">'www.google.com/index.html'</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">repos</span><span class=""o"">.</span><span class=""n"">exists</span><span class=""p"">(</span><span class=""s1"">'http://www.google.com/index.html'</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.lib.format,"An object that can be passed as an argument to the numpy.dtype
constructor to create the array’s dtype.",
numpy.dot,"Dot product of two arrays. Specifically,","<pre><span></span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)[</span><span class=""n"">i</span><span class=""p"">,</span><span class=""n"">j</span><span class=""p"">,</span><span class=""n"">k</span><span class=""p"">,</span><span class=""n"">m</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""nb"">sum</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">[</span><span class=""n"">i</span><span class=""p"">,</span><span class=""n"">j</span><span class=""p"">,:]</span> <span class=""o"">*</span> <span class=""n"">b</span><span class=""p"">[</span><span class=""n"">k</span><span class=""p"">,:,</span><span class=""n"">m</span><span class=""p"">])</span>
</pre>"
numpy.linalg.multi_dot,"Compute the dot product of two or more arrays in a single function call,
while automatically selecting the fastest evaluation order.","<pre><span></span><span class=""k"">def</span> <span class=""nf"">multi_dot</span><span class=""p"">(</span><span class=""n"">arrays</span><span class=""p"">):</span> <span class=""k"">return</span> <span class=""n"">functools</span><span class=""o"">.</span><span class=""n"">reduce</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">,</span> <span class=""n"">arrays</span><span class=""p"">)</span>
</pre>"
numpy.vdot,Return the dot product of two vectors.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""o"">+</span><span class=""mi"">4</span><span class=""n"">j</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">5</span><span class=""o"">+</span><span class=""mi"">6</span><span class=""n"">j</span><span class=""p"">,</span><span class=""mi"">7</span><span class=""o"">+</span><span class=""mi"">8</span><span class=""n"">j</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vdot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)</span>
<span class=""go"">(70-8j)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vdot</span><span class=""p"">(</span><span class=""n"">b</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">(70+8j)</span>
</pre>"
numpy.inner,Inner product of two arrays.,"<pre><span></span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inner</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)</span> <span class=""o"">=</span> <span class=""nb"">sum</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">[:]</span><span class=""o"">*</span><span class=""n"">b</span><span class=""p"">[:])</span>
</pre>"
numpy.outer,Compute the outer product of two vectors.,"<pre><span></span><span class=""p"">[[</span><span class=""n"">a0</span><span class=""o"">*</span><span class=""n"">b0</span>  <span class=""n"">a0</span><span class=""o"">*</span><span class=""n"">b1</span> <span class=""o"">...</span> <span class=""n"">a0</span><span class=""o"">*</span><span class=""n"">bN</span> <span class=""p"">]</span>
 <span class=""p"">[</span><span class=""n"">a1</span><span class=""o"">*</span><span class=""n"">b0</span>    <span class=""o"">.</span>
 <span class=""p"">[</span> <span class=""o"">...</span>          <span class=""o"">.</span>
 <span class=""p"">[</span><span class=""n"">aM</span><span class=""o"">*</span><span class=""n"">b0</span>            <span class=""n"">aM</span><span class=""o"">*</span><span class=""n"">bN</span> <span class=""p"">]]</span>
</pre>"
numpy.matmul,Matrix product of two arrays.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">([</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">([</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">c</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(9, 5, 7, 9, 5, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">matmul</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">c</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(9, 5, 7, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># n is 7, k is 4, m is 3</span>
</pre>"
numpy.tensordot,Compute tensor dot product along specified axes.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">60.</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">24.</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tensordot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">,</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">],[</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">]))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(5, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span>
<span class=""go"">array([[4400., 4730.],</span>
<span class=""go"">       [4532., 4874.],</span>
<span class=""go"">       [4664., 5018.],</span>
<span class=""go"">       [4796., 5162.],</span>
<span class=""go"">       [4928., 5306.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># A slower but equivalent way of computing the same...</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">d</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">for</span> <span class=""n"">i</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">):</span>
<span class=""gp"">... </span>  <span class=""k"">for</span> <span class=""n"">j</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">):</span>
<span class=""gp"">... </span>    <span class=""k"">for</span> <span class=""n"">k</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">):</span>
<span class=""gp"">... </span>      <span class=""k"">for</span> <span class=""n"">n</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">):</span>
<span class=""gp"">... </span>        <span class=""n"">d</span><span class=""p"">[</span><span class=""n"">i</span><span class=""p"">,</span><span class=""n"">j</span><span class=""p"">]</span> <span class=""o"">+=</span> <span class=""n"">a</span><span class=""p"">[</span><span class=""n"">k</span><span class=""p"">,</span><span class=""n"">n</span><span class=""p"">,</span><span class=""n"">i</span><span class=""p"">]</span> <span class=""o"">*</span> <span class=""n"">b</span><span class=""p"">[</span><span class=""n"">n</span><span class=""p"">,</span><span class=""n"">k</span><span class=""p"">,</span><span class=""n"">j</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">==</span> <span class=""n"">d</span>
<span class=""go"">array([[ True,  True],</span>
<span class=""go"">       [ True,  True],</span>
<span class=""go"">       [ True,  True],</span>
<span class=""go"">       [ True,  True],</span>
<span class=""go"">       [ True,  True]])</span>
</pre>"
numpy.einsum,Evaluates the Einstein summation convention on the operands.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">25</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">)</span>
</pre>"
numpy.einsum_path,"Evaluates the lowest cost contraction order for an einsum expression by
considering the creation of intermediate arrays.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">seed</span><span class=""p"">(</span><span class=""mi"">123</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">rand</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">rand</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">c</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">rand</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">path_info</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">einsum_path</span><span class=""p"">(</span><span class=""s1"">'ij,jk,kl-&gt;il'</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">,</span> <span class=""n"">c</span><span class=""p"">,</span> <span class=""n"">optimize</span><span class=""o"">=</span><span class=""s1"">'greedy'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">path_info</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">['einsum_path', (1, 2), (0, 1)]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">path_info</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">])</span>
<span class=""go"">  Complete contraction:  ij,jk,kl-&gt;il # may vary</span>
<span class=""go"">         Naive scaling:  4</span>
<span class=""go"">     Optimized scaling:  3</span>
<span class=""go"">      Naive FLOP count:  1.600e+02</span>
<span class=""go"">  Optimized FLOP count:  5.600e+01</span>
<span class=""go"">   Theoretical speedup:  2.857</span>
<span class=""go"">  Largest intermediate:  4.000e+00 elements</span>
<span class=""go"">-------------------------------------------------------------------------</span>
<span class=""go"">scaling                  current                                remaining</span>
<span class=""go"">-------------------------------------------------------------------------</span>
<span class=""go"">   3                   kl,jk-&gt;jl                                ij,jl-&gt;il</span>
<span class=""go"">   3                   jl,ij-&gt;il                                   il-&gt;il</span>
</pre>"
numpy.linalg.matrix_power,Raise a square matrix to the (integer) power n.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy.linalg</span> <span class=""kn"">import</span> <span class=""n"">matrix_power</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">i</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">]])</span> <span class=""c1""># matrix equiv. of the imaginary unit</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_power</span><span class=""p"">(</span><span class=""n"">i</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""c1""># should = -i</span>
<span class=""go"">array([[ 0, -1],</span>
<span class=""go"">       [ 1,  0]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_power</span><span class=""p"">(</span><span class=""n"">i</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">array([[1, 0],</span>
<span class=""go"">       [0, 1]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_power</span><span class=""p"">(</span><span class=""n"">i</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">3</span><span class=""p"">)</span> <span class=""c1""># should = 1/(-i) = i, but w/ f.p. elements</span>
<span class=""go"">array([[ 0.,  1.],</span>
<span class=""go"">       [-1.,  0.]])</span>
</pre>"
numpy.kron,Kronecker product of two arrays.,"<pre><span></span><span class=""n"">kron</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">)[</span><span class=""n"">k0</span><span class=""p"">,</span><span class=""n"">k1</span><span class=""p"">,</span><span class=""o"">...</span><span class=""p"">,</span><span class=""n"">kN</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""p"">[</span><span class=""n"">i0</span><span class=""p"">,</span><span class=""n"">i1</span><span class=""p"">,</span><span class=""o"">...</span><span class=""p"">,</span><span class=""n"">iN</span><span class=""p"">]</span> <span class=""o"">*</span> <span class=""n"">b</span><span class=""p"">[</span><span class=""n"">j0</span><span class=""p"">,</span><span class=""n"">j1</span><span class=""p"">,</span><span class=""o"">...</span><span class=""p"">,</span><span class=""n"">jN</span><span class=""p"">]</span>
</pre>"
numpy.linalg.cholesky,Cholesky decomposition.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""o"">-</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span>
<span class=""go"">array([[ 1.+0.j, -0.-2.j],</span>
<span class=""go"">       [ 0.+2.j,  5.+0.j]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">L</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">cholesky</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">L</span>
<span class=""go"">array([[1.+0.j, 0.+0.j],</span>
<span class=""go"">       [0.+2.j, 1.+0.j]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">L</span><span class=""p"">,</span> <span class=""n"">L</span><span class=""o"">.</span><span class=""n"">T</span><span class=""o"">.</span><span class=""n"">conj</span><span class=""p"">())</span> <span class=""c1""># verify that L * L.H = A</span>
<span class=""go"">array([[1.+0.j, 0.-2.j],</span>
<span class=""go"">       [0.+2.j, 5.+0.j]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">A</span> <span class=""o"">=</span> <span class=""p"">[[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""o"">-</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">]]</span> <span class=""c1""># what happens if A is only array_like?</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">cholesky</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">)</span> <span class=""c1""># an ndarray object is returned</span>
<span class=""go"">array([[1.+0.j, 0.+0.j],</span>
<span class=""go"">       [0.+2.j, 1.+0.j]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""c1""># But a matrix object is returned if A is a matrix object</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">cholesky</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">matrix</span><span class=""p"">(</span><span class=""n"">A</span><span class=""p"">))</span>
<span class=""go"">matrix([[ 1.+0.j,  0.+0.j],</span>
<span class=""go"">        [ 0.+2.j,  1.+0.j]])</span>
</pre>"
numpy.linalg.qr,Compute the qr factorization of a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">q</span><span class=""p"">,</span> <span class=""n"">r</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">qr</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">q</span><span class=""p"">,</span> <span class=""n"">r</span><span class=""p"">))</span>  <span class=""c1""># a does equal qr</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r2</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">qr</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">mode</span><span class=""o"">=</span><span class=""s1"">'r'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">r</span><span class=""p"">,</span> <span class=""n"">r2</span><span class=""p"">)</span>  <span class=""c1""># mode='r' returns the same r as mode='full'</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">normal</span><span class=""p"">(</span><span class=""n"">size</span><span class=""o"">=</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">))</span> <span class=""c1""># Stack of 2 x 2 matrices as input</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">q</span><span class=""p"">,</span> <span class=""n"">r</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">qr</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">q</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 2, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">r</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 2, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">matmul</span><span class=""p"">(</span><span class=""n"">q</span><span class=""p"">,</span> <span class=""n"">r</span><span class=""p"">))</span>
<span class=""go"">True</span>
</pre>"
numpy.linalg.svd,Singular Value Decomposition.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""n"">j</span><span class=""o"">*</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""n"">j</span><span class=""o"">*</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
</pre>"
numpy.linalg.eig,Compute the eigenvalues and right eigenvectors of a square array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
</pre>"
numpy.linalg.eigh,"Return the eigenvalues and eigenvectors of a complex Hermitian
(conjugate symmetric) or a real symmetric matrix.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 1.+0.j, -0.-2.j],</span>
<span class=""go"">       [ 0.+2.j,  5.+0.j]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">w</span><span class=""p"">,</span> <span class=""n"">v</span> <span class=""o"">=</span> <span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">eigh</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">w</span><span class=""p"">;</span> <span class=""n"">v</span>
<span class=""go"">array([0.17157288, 5.82842712])</span>
<span class=""go"">array([[-0.92387953+0.j        , -0.38268343+0.j        ], # may vary</span>
<span class=""go"">       [ 0.        +0.38268343j,  0.        -0.92387953j]])</span>
</pre>"
numpy.linalg.eigvals,Compute the eigenvalues of a general matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">random</span><span class=""p"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">Q</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">cos</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">),</span> <span class=""o"">-</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">sin</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)],</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">sin</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">cos</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">norm</span><span class=""p"">(</span><span class=""n"">Q</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""p"">:]),</span> <span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">norm</span><span class=""p"">(</span><span class=""n"">Q</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">:]),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">Q</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""p"">:],</span><span class=""n"">Q</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">:])</span>
<span class=""go"">(1.0, 1.0, 0.0)</span>
</pre>"
numpy.linalg.eigvalsh,Compute the eigenvalues of a complex Hermitian or real symmetric matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">eigvalsh</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([ 0.17157288,  5.82842712]) # may vary</span>
</pre>"
numpy.linalg.norm,Matrix or vector norm.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">)</span> <span class=""o"">-</span> <span class=""mi"">4</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([-4, -3, -2, ...,  2,  3,  4])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">a</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span>
<span class=""go"">array([[-4, -3, -2],</span>
<span class=""go"">       [-1,  0,  1],</span>
<span class=""go"">       [ 2,  3,  4]])</span>
</pre>"
numpy.linalg.cond,Compute the condition number of a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 1,  0, -1],</span>
<span class=""go"">       [ 0,  1,  0],</span>
<span class=""go"">       [ 1,  0,  1]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">1.4142135623730951</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""s1"">'fro'</span><span class=""p"">)</span>
<span class=""go"">3.1622776601683795</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">2.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">1.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">2.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">1.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">1.4142135623730951</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">cond</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">0.70710678118654746 # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">min</span><span class=""p"">(</span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">svd</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">compute_uv</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">))</span><span class=""o"">*</span><span class=""nb"">min</span><span class=""p"">(</span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">svd</span><span class=""p"">(</span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">inv</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">),</span> <span class=""n"">compute_uv</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">))</span>
<span class=""go"">0.70710678118654746 # may vary</span>
</pre>"
numpy.linalg.det,Compute the determinant of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">det</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">-2.0 # may vary</span>
</pre>"
numpy.linalg.matrix_rank,Return matrix rank of array using SVD method,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy.linalg</span> <span class=""kn"">import</span> <span class=""n"">matrix_rank</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_rank</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">))</span> <span class=""c1""># Full rank matrix</span>
<span class=""go"">4</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">I</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">);</span> <span class=""n"">I</span><span class=""p"">[</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mf"">0.</span> <span class=""c1""># rank deficient matrix</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_rank</span><span class=""p"">(</span><span class=""n"">I</span><span class=""p"">)</span>
<span class=""go"">3</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_rank</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,)))</span> <span class=""c1""># 1 dimension - rank 1 unless all 0</span>
<span class=""go"">1</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">matrix_rank</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,)))</span>
<span class=""go"">0</span>
</pre>"
numpy.linalg.slogdet,Compute the sign and (natural) logarithm of the determinant of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""p"">(</span><span class=""n"">sign</span><span class=""p"">,</span> <span class=""n"">logdet</span><span class=""p"">)</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">slogdet</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""p"">(</span><span class=""n"">sign</span><span class=""p"">,</span> <span class=""n"">logdet</span><span class=""p"">)</span>
<span class=""go"">(-1, 0.69314718055994529) # may vary</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">sign</span> <span class=""o"">*</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">exp</span><span class=""p"">(</span><span class=""n"">logdet</span><span class=""p"">)</span>
<span class=""go"">-2.0</span>
</pre>"
numpy.trace,Return the sum along diagonals of the array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">trace</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">3.0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">8</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">trace</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([6, 8])</span>
</pre>"
numpy.linalg.solve,"Solve a linear matrix equation, or system of linear scalar equations.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">solve</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([-1.,  1.])</span>
</pre>"
numpy.linalg.tensorsolve,Solve the tensor equation a x = b for x.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""o"">*</span><span class=""mi"">3</span><span class=""o"">*</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">shape</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""o"">*</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""o"">*</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">tensorsolve</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(2, 3, 4)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tensordot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axes</span><span class=""o"">=</span><span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">b</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.linalg.lstsq,Return the least-squares solution to a linear matrix equation.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">y</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mf"">0.2</span><span class=""p"">,</span> <span class=""mf"">0.9</span><span class=""p"">,</span> <span class=""mf"">2.1</span><span class=""p"">])</span>
</pre>"
numpy.linalg.inv,Compute the (multiplicative) inverse of a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy.linalg</span> <span class=""kn"">import</span> <span class=""n"">inv</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""mf"">2.</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">3.</span><span class=""p"">,</span> <span class=""mf"">4.</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ainv</span> <span class=""o"">=</span> <span class=""n"">inv</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">ainv</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">ainv</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""go"">True</span>
</pre>"
numpy.linalg.pinv,Compute the (Moore-Penrose) pseudo-inverse of a matrix.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">B</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">pinv</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">B</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">)))</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">B</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">B</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dot</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">B</span><span class=""p"">)))</span>
<span class=""go"">True</span>
</pre>"
numpy.linalg.tensorinv,Compute the ‘inverse’ of an N-dimensional array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""o"">*</span><span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">shape</span> <span class=""o"">=</span> <span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ainv</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">tensorinv</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">ind</span><span class=""o"">=</span><span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ainv</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(8, 3, 4, 6)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">tensordot</span><span class=""p"">(</span><span class=""n"">ainv</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">linalg</span><span class=""o"">.</span><span class=""n"">tensorsolve</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">True</span>
</pre>"
numpy.linalg.LinAlgError,Generic Python-exception-derived object raised by linalg functions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">from</span> <span class=""nn"">numpy</span> <span class=""kn"">import</span> <span class=""n"">linalg</span> <span class=""k"">as</span> <span class=""n"">LA</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">LA</span><span class=""o"">.</span><span class=""n"">inv</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">)))</span>
<span class=""gt"">Traceback (most recent call last):</span>
  File <span class=""nb"">""&lt;stdin&gt;""</span>, line <span class=""m"">1</span>, in <span class=""n"">&lt;module&gt;</span>
<span class=""gr"">  File ""...linalg.py"", line 350,</span>
<span class=""gr"">    in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))</span>
<span class=""gr"">  File ""...linalg.py"", line 249,</span>
<span class=""gr"">    in solve</span>
<span class=""gr"">    raise LinAlgError('Singular matrix')</span>
<span class=""gr"">numpy.linalg.LinAlgError</span>: <span class=""n"">Singular matrix</span>
</pre>"
numpy.all,Test whether all array elements along a given axis evaluate to True.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">([[</span><span class=""kc"">True</span><span class=""p"">,</span><span class=""kc"">False</span><span class=""p"">],[</span><span class=""kc"">True</span><span class=""p"">,</span><span class=""kc"">True</span><span class=""p"">]])</span>
<span class=""go"">False</span>
</pre>"
numpy.any,Test whether any array element along a given axis evaluates to True.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">any</span><span class=""p"">([[</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">]])</span>
<span class=""go"">True</span>
</pre>"
numpy.isfinite,Test element-wise for finiteness (not infinity and not Not a Number).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">NINF</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfinite</span><span class=""p"">([</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">log</span><span class=""p"">(</span><span class=""o"">-</span><span class=""mf"">1.</span><span class=""p"">),</span><span class=""mf"">1.</span><span class=""p"">,</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">log</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)])</span>
<span class=""go"">array([False,  True, False])</span>
</pre>"
numpy.isinf,Test element-wise for positive or negative infinity.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">NINF</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isinf</span><span class=""p"">([</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">,</span> <span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">])</span>
<span class=""go"">array([ True,  True, False, False])</span>
</pre>"
numpy.isnan,Test element-wise for NaN and return result as a boolean array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnan</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnan</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnan</span><span class=""p"">([</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">log</span><span class=""p"">(</span><span class=""o"">-</span><span class=""mf"">1.</span><span class=""p"">),</span><span class=""mf"">1.</span><span class=""p"">,</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">log</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)])</span>
<span class=""go"">array([ True, False, False])</span>
</pre>"
numpy.isnat,Test element-wise for NaT (not a time) and return result as a boolean array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnat</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">datetime64</span><span class=""p"">(</span><span class=""s2"">""NaT""</span><span class=""p"">))</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnat</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">datetime64</span><span class=""p"">(</span><span class=""s2"">""2016-01-01""</span><span class=""p"">))</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isnat</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""s2"">""NaT""</span><span class=""p"">,</span> <span class=""s2"">""2016-01-01""</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""s2"">""datetime64[ns]""</span><span class=""p"">))</span>
<span class=""go"">array([ True, False])</span>
</pre>"
numpy.isneginf,"Test element-wise for negative infinity, return result as bool array.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isneginf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">NINF</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isneginf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isneginf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">PINF</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isneginf</span><span class=""p"">([</span><span class=""o"">-</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">,</span> <span class=""mf"">0.</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">])</span>
<span class=""go"">array([ True, False, False])</span>
</pre>"
numpy.isposinf,"Test element-wise for positive infinity, return result as bool array.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isposinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">PINF</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isposinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isposinf</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">NINF</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isposinf</span><span class=""p"">([</span><span class=""o"">-</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">,</span> <span class=""mf"">0.</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">])</span>
<span class=""go"">array([False, False,  True])</span>
</pre>"
numpy.iscomplex,"Returns a bool array, where True if input element is complex.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iscomplex</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">1</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">0</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mf"">4.5</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">])</span>
<span class=""go"">array([ True, False, False, False, False,  True])</span>
</pre>"
numpy.iscomplexobj,Check for a complex type or an array of complex numbers.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iscomplexobj</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iscomplexobj</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">0</span><span class=""n"">j</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">iscomplexobj</span><span class=""p"">([</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">0</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">])</span>
<span class=""go"">True</span>
</pre>"
numpy.isfortran,Check if the array is Fortran contiguous but not C contiguous.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]],</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'C'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isfortran</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.isreal,"Returns a bool array, where True if input element is real.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">1</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""o"">+</span><span class=""mi"">0</span><span class=""n"">j</span><span class=""p"">,</span> <span class=""mf"">4.5</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""n"">j</span><span class=""p"">],</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">complex</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isreal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([False,  True,  True,  True,  True, False])</span>
</pre>"
numpy.isrealobj,Return True if x is a not complex type or an array of complex numbers.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isrealobj</span><span class=""p"">(</span><span class=""s1"">'A string'</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isrealobj</span><span class=""p"">(</span><span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isrealobj</span><span class=""p"">(</span><span class=""kc"">None</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.isscalar,Returns True if the type of element is a scalar type.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isscalar</span><span class=""p"">(</span><span class=""mf"">3.1</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isscalar</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""mf"">3.1</span><span class=""p"">))</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isscalar</span><span class=""p"">([</span><span class=""mf"">3.1</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isscalar</span><span class=""p"">(</span><span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isscalar</span><span class=""p"">(</span><span class=""s1"">'numpy'</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.logical_and,Compute the truth value of x1 AND x2 element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_and</span><span class=""p"">(</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_and</span><span class=""p"">([</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""kc"">False</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">])</span>
<span class=""go"">array([False, False])</span>
</pre>"
numpy.logical_or,Compute the truth value of x1 OR x2 element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_or</span><span class=""p"">(</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_or</span><span class=""p"">([</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""kc"">False</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
</pre>"
numpy.logical_not,Compute the truth value of NOT x element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_not</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_not</span><span class=""p"">([</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">])</span>
<span class=""go"">array([False,  True,  True, False])</span>
</pre>"
numpy.logical_xor,"Compute the truth value of x1 XOR x2, element-wise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_xor</span><span class=""p"">(</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">logical_xor</span><span class=""p"">([</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">])</span>
<span class=""go"">array([False,  True,  True, False])</span>
</pre>"
numpy.allclose,Returns True if two arrays are element-wise equal within a tolerance.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-7</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.00001e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.00001e10</span><span class=""p"">,</span><span class=""mf"">1e-9</span><span class=""p"">])</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0001e10</span><span class=""p"">,</span><span class=""mf"">1e-9</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">([</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">allclose</span><span class=""p"">([</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""n"">equal_nan</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.isclose,"Returns a boolean array where two arrays are element-wise equal within a
tolerance.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-7</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.00001e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.00001e10</span><span class=""p"">,</span><span class=""mf"">1e-9</span><span class=""p"">])</span>
<span class=""go"">array([ True, True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e10</span><span class=""p"">,</span><span class=""mf"">1e-8</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0001e10</span><span class=""p"">,</span><span class=""mf"">1e-9</span><span class=""p"">])</span>
<span class=""go"">array([False,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">],</span> <span class=""n"">equal_nan</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""go"">array([ True, True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e-8</span><span class=""p"">,</span> <span class=""mf"">1e-7</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">0.0</span><span class=""p"">,</span> <span class=""mf"">0.0</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e-100</span><span class=""p"">,</span> <span class=""mf"">1e-7</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">0.0</span><span class=""p"">,</span> <span class=""mf"">0.0</span><span class=""p"">],</span> <span class=""n"">atol</span><span class=""o"">=</span><span class=""mf"">0.0</span><span class=""p"">)</span>
<span class=""go"">array([False, False])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e-10</span><span class=""p"">,</span> <span class=""mf"">1e-10</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1e-20</span><span class=""p"">,</span> <span class=""mf"">0.0</span><span class=""p"">])</span>
<span class=""go"">array([ True,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">isclose</span><span class=""p"">([</span><span class=""mf"">1e-10</span><span class=""p"">,</span> <span class=""mf"">1e-10</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1e-20</span><span class=""p"">,</span> <span class=""mf"">0.999999e-10</span><span class=""p"">],</span> <span class=""n"">atol</span><span class=""o"">=</span><span class=""mf"">0.0</span><span class=""p"">)</span>
<span class=""go"">array([False,  True])</span>
</pre>"
numpy.array_equal,"True if two arrays have the same shape and elements, False otherwise.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]),</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]))</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">])</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">equal_nan</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.array_equiv,Returns True if input arrays are shape consistent and all elements equal.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equiv</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array_equiv</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""go"">False</span>
</pre>"
numpy.greater,Return the truth value of (x1 > x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">greater</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
</pre>"
numpy.greater_equal,Return the truth value of (x1 >= x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">greater_equal</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([ True, True, False])</span>
</pre>"
numpy.less,Return the truth value of (x1 < x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">less</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([ True, False])</span>
</pre>"
numpy.less_equal,Return the truth value of (x1 <= x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">less_equal</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([False,  True,  True])</span>
</pre>"
numpy.equal,Return (x1 == x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">equal</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">array([ True,  True, False])</span>
</pre>"
numpy.not_equal,Return (x1 != x2) element-wise.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">not_equal</span><span class=""p"">([</span><span class=""mf"">1.</span><span class=""p"">,</span><span class=""mf"">2.</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""mf"">3.</span><span class=""p"">])</span>
<span class=""go"">array([False,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">not_equal</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""go"">array([[False,  True],</span>
<span class=""go"">       [False,  True]])</span>
</pre>"
numpy.ma.MaskType,alias of bool_,
numpy.ma.masked_array,alias of MaskedArray,
numpy.ma.array,An array class with possibly masked values.,"<pre><span></span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">MaskedArray</span><span class=""p"">(</span><span class=""n"">data</span><span class=""p"">,</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""n"">nomask</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">,</span> <span class=""n"">copy</span><span class=""o"">=</span><span class=""kc"">False</span><span class=""p"">,</span> <span class=""n"">subok</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">,</span>
                <span class=""n"">ndmin</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""n"">fill_value</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">,</span> <span class=""n"">keep_mask</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""n"">hard_mask</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">,</span>
                <span class=""n"">shrink</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""kc"">None</span><span class=""p"">)</span>
</pre>"
numpy.ma.copy,Return a copy of the array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">]],</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'F'</span><span class=""p"">)</span>
</pre>"
numpy.ma.frombuffer,Interpret a buffer as a 1-dimensional array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">(</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dt</span> <span class=""o"">=</span> <span class=""n"">dt</span><span class=""o"">.</span><span class=""n"">newbyteorder</span><span class=""p"">(</span><span class=""s1"">'&gt;'</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">frombuffer</span><span class=""p"">(</span><span class=""n"">buf</span><span class=""p"">,</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">dt</span><span class=""p"">)</span> 
</pre>"
numpy.ma.fromfunction,Construct an array by executing a function over each coordinate.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">fromfunction</span><span class=""p"">(</span><span class=""k"">lambda</span> <span class=""n"">i</span><span class=""p"">,</span> <span class=""n"">j</span><span class=""p"">:</span> <span class=""n"">i</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">float</span><span class=""p"">)</span>
<span class=""go"">array([[0., 0.],</span>
<span class=""go"">       [1., 1.]])</span>
</pre>"
numpy.ma.MaskedArray.copy,Return a copy of the array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">]],</span> <span class=""n"">order</span><span class=""o"">=</span><span class=""s1"">'F'</span><span class=""p"">)</span>
</pre>"
numpy.ma.empty,"Return a new array of given shape and type, without initializing entries.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty</span><span class=""p"">([</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">array([[ -9.74499359e+001,   6.69583040e-309],</span>
<span class=""go"">       [  2.13182611e-314,   3.06959433e-309]])         #uninitialized</span>
</pre>"
numpy.ma.empty_like,Return a new array with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">])</span>                         <span class=""c1""># a is array-like</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[-1073741821, -1073741821,           3],    # uninitialized</span>
<span class=""go"">       [          0,           0, -1073741821]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""mf"">2.</span><span class=""p"">,</span> <span class=""mf"">3.</span><span class=""p"">],[</span><span class=""mf"">4.</span><span class=""p"">,</span><span class=""mf"">5.</span><span class=""p"">,</span><span class=""mf"">6.</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">empty_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[ -2.00000715e+000,   1.48219694e-323,  -2.00000572e+000], # uninitialized</span>
<span class=""go"">       [  4.38791518e-305,  -2.00000715e+000,   4.17269252e-309]])</span>
</pre>"
numpy.ma.masked_all,Empty masked array with all elements masked.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_all</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[--, --, --],</span>
<span class=""go"">        [--, --, --],</span>
<span class=""go"">        [--, --, --]],</span>
<span class=""go"">  mask=[[ True,  True,  True],</span>
<span class=""go"">        [ True,  True,  True],</span>
<span class=""go"">        [ True,  True,  True]],</span>
<span class=""go"">  fill_value=1e+20,</span>
<span class=""go"">  dtype=float64)</span>
</pre>"
numpy.ma.masked_all_like,Empty masked array with the properties of an existing array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arr</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arr</span>
<span class=""go"">array([[0., 0., 0.],</span>
<span class=""go"">       [0., 0., 0.]], dtype=float32)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_all_like</span><span class=""p"">(</span><span class=""n"">arr</span><span class=""p"">)</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[--, --, --],</span>
<span class=""go"">        [--, --, --]],</span>
<span class=""go"">  mask=[[ True,  True,  True],</span>
<span class=""go"">        [ True,  True,  True]],</span>
<span class=""go"">  fill_value=1e+20,</span>
<span class=""go"">  dtype=float32)</span>
</pre>"
numpy.ma.ones,"Return a new array of given shape and type, filled with ones.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([1., 1., 1., 1., 1.])</span>
</pre>"
numpy.ma.ones_like,Return an array of ones with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">x</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 4, 5]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ones_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array([[1, 1, 1],</span>
<span class=""go"">       [1, 1, 1]])</span>
</pre>"
numpy.ma.zeros,"Return a new array of given shape and type, filled with zeros.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">)</span>
<span class=""go"">array([ 0.,  0.,  0.,  0.,  0.])</span>
</pre>"
numpy.ma.zeros_like,Return an array of zeros with the same shape and type as a given array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">x</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0, 1, 2],</span>
<span class=""go"">       [3, 4, 5]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros_like</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array([[0, 0, 0],</span>
<span class=""go"">       [0, 0, 0]])</span>
</pre>"
numpy.ma.all,Returns True if all elements evaluate to True.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">])</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">()</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""p"">(</span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">()</span> <span class=""ow"">is</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.ma.any,Returns True if any of the elements of a evaluate to True.,
numpy.ma.count,Count the non-masked elements of the array along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">:]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 1, 2],</span>
<span class=""go"">        [--, --, --]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [ True,  True,  True]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">()</span>
<span class=""go"">3</span>
</pre>"
numpy.ma.count_masked,Count the number of masked elements along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 1, 2],</span>
<span class=""go"">        [--, 4, --],</span>
<span class=""go"">        [6, --, 8]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">count_masked</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">3</span>
</pre>"
numpy.ma.getmask,"Return the mask of a masked array, or nomask.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">getmask</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[False,  True],</span>
<span class=""go"">       [False, False]])</span>
</pre>"
numpy.ma.getmaskarray,"Return the mask of a masked array, or full boolean array of False.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">getmaskarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[False,  True],</span>
<span class=""go"">       [False, False]])</span>
</pre>"
numpy.ma.getdata,Return the data of a masked array as an ndarray.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">getdata</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4]])</span>
</pre>"
numpy.ma.nonzero,Return the indices of unmasked elements that are not zero.,"<pre><span></span><span class=""n"">a</span><span class=""p"">[</span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">nonzero</span><span class=""p"">()]</span>
</pre>"
numpy.ma.shape,Return the shape of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">(3, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""go"">(1, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">(1,)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">()</span>
</pre>"
numpy.ma.size,Return the number of elements along a given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">6</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">3</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">2</span>
</pre>"
numpy.ma.is_masked,Determine whether input has masked values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(data=[--, 1, --, 2, 3],</span>
<span class=""go"">             mask=[ True, False,  True, False, False],</span>
<span class=""go"">       fill_value=0)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">is_masked</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""mi"">42</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(data=[0, 1, 0, 2, 3],</span>
<span class=""go"">             mask=False,</span>
<span class=""go"">       fill_value=42)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">is_masked</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">False</span>
</pre>"
numpy.ma.is_mask,"Return True if m is a valid, standard mask.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span>
<span class=""go"">masked_array(data=[--, 1, --, 2, 3],</span>
<span class=""go"">             mask=[ True, False,  True, False, False],</span>
<span class=""go"">       fill_value=0)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">is_mask</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">is_mask</span><span class=""p"">(</span><span class=""n"">m</span><span class=""o"">.</span><span class=""n"">mask</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.ma.isMaskedArray,Test whether input is an instance of MaskedArray.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 1.,  0.,  0.],</span>
<span class=""go"">       [ 0.,  1.,  0.],</span>
<span class=""go"">       [ 0.,  0.,  1.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_values</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1.0, --, --],</span>
<span class=""go"">        [--, 1.0, --],</span>
<span class=""go"">        [--, --, 1.0]],</span>
<span class=""go"">  mask=[[False,  True,  True],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [ True,  True, False]],</span>
<span class=""go"">  fill_value=0.0)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">False</span>
</pre>"
numpy.ma.isMA,Test whether input is an instance of MaskedArray.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 1.,  0.,  0.],</span>
<span class=""go"">       [ 0.,  1.,  0.],</span>
<span class=""go"">       [ 0.,  0.,  1.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_values</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1.0, --, --],</span>
<span class=""go"">        [--, 1.0, --],</span>
<span class=""go"">        [--, --, 1.0]],</span>
<span class=""go"">  mask=[[False,  True,  True],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [ True,  True, False]],</span>
<span class=""go"">  fill_value=0.0)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">False</span>
</pre>"
numpy.ma.isarray,Test whether input is an instance of MaskedArray.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[ 1.,  0.,  0.],</span>
<span class=""go"">       [ 0.,  1.,  0.],</span>
<span class=""go"">       [ 0.,  0.,  1.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_values</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1.0, --, --],</span>
<span class=""go"">        [--, 1.0, --],</span>
<span class=""go"">        [--, --, 1.0]],</span>
<span class=""go"">  mask=[[False,  True,  True],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [ True,  True, False]],</span>
<span class=""go"">  fill_value=0.0)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">False</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">isMaskedArray</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""go"">False</span>
</pre>"
numpy.ma.MaskedArray.all,Returns True if all elements evaluate to True.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">])</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">()</span>
<span class=""go"">True</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""kc"">True</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""p"">(</span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">all</span><span class=""p"">()</span> <span class=""ow"">is</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span><span class=""p"">)</span>
<span class=""go"">True</span>
</pre>"
numpy.ma.MaskedArray.any,Returns True if any of the elements of a evaluate to True.,
numpy.ma.MaskedArray.count,Count the non-masked elements of the array along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">6</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""p"">:]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 1, 2],</span>
<span class=""go"">        [--, --, --]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [ True,  True,  True]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">count</span><span class=""p"">()</span>
<span class=""go"">3</span>
</pre>"
numpy.ma.MaskedArray.nonzero,Return the indices of unmasked elements that are not zero.,"<pre><span></span><span class=""n"">a</span><span class=""p"">[</span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">nonzero</span><span class=""p"">()]</span>
</pre>"
numpy.ma.shape,Return the shape of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">eye</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">(3, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""go"">(1, 2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""go"">(1,)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">shape</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">()</span>
</pre>"
numpy.ma.size,Return the number of elements along a given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">6</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">)</span>
<span class=""go"">3</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">size</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">2</span>
</pre>"
numpy.ma.ravel,"Returns a 1D version of self, as a view.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">],[</span><span class=""mi"">7</span><span class=""p"">,</span><span class=""mi"">8</span><span class=""p"">,</span><span class=""mi"">9</span><span class=""p"">]],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">+</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">]</span><span class=""o"">*</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --, 3],</span>
<span class=""go"">        [--, 5, --],</span>
<span class=""go"">        [7, --, 9]],</span>
<span class=""go"">  mask=[[False,  True, False],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">ravel</span><span class=""p"">()</span>
<span class=""go"">masked_array(data=[1, --, 3, --, 5, --, 7, --, 9],</span>
<span class=""go"">             mask=[False,  True, False,  True, False,  True, False,  True,</span>
<span class=""go"">                   False],</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.reshape,Returns an array containing the same data with a new shape.,
numpy.ma.resize,Return a new masked array with the specified size and shape.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span> <span class=""p"">,[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, 2, 3],</span>
<span class=""go"">        [4, 1, 2],</span>
<span class=""go"">        [3, 4, 1]],</span>
<span class=""go"">  mask=False,</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">resize</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --, 3],</span>
<span class=""go"">        [4, 1, --],</span>
<span class=""go"">        [3, 4, 1]],</span>
<span class=""go"">  mask=[[False,  True, False],</span>
<span class=""go"">        [False, False,  True],</span>
<span class=""go"">        [False, False, False]],</span>
<span class=""go"">  fill_value=999999)</span>
</pre>"
numpy.ma.MaskedArray.flatten,Return a copy of the array collapsed into one dimension.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">flatten</span><span class=""p"">()</span>
<span class=""go"">array([1, 2, 3, 4])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">flatten</span><span class=""p"">(</span><span class=""s1"">'F'</span><span class=""p"">)</span>
<span class=""go"">array([1, 3, 2, 4])</span>
</pre>"
numpy.ma.MaskedArray.ravel,"Returns a 1D version of self, as a view.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">],[</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">],[</span><span class=""mi"">7</span><span class=""p"">,</span><span class=""mi"">8</span><span class=""p"">,</span><span class=""mi"">9</span><span class=""p"">]],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">+</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">]</span><span class=""o"">*</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --, 3],</span>
<span class=""go"">        [--, 5, --],</span>
<span class=""go"">        [7, --, 9]],</span>
<span class=""go"">  mask=[[False,  True, False],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">ravel</span><span class=""p"">()</span>
<span class=""go"">masked_array(data=[1, --, 3, --, 5, --, 7, --, 9],</span>
<span class=""go"">             mask=[False,  True, False,  True, False,  True, False,  True,</span>
<span class=""go"">                   False],</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.MaskedArray.reshape,Give a new shape to the array without changing its data.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">0</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[--, 2],</span>
<span class=""go"">        [3, --]],</span>
<span class=""go"">  mask=[[ True, False],</span>
<span class=""go"">        [False,  True]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">x</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">1</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[--],</span>
<span class=""go"">        [2],</span>
<span class=""go"">        [3],</span>
<span class=""go"">        [--]],</span>
<span class=""go"">  mask=[[ True],</span>
<span class=""go"">        [False],</span>
<span class=""go"">        [False],</span>
<span class=""go"">        [ True]],</span>
<span class=""go"">  fill_value=999999)</span>
</pre>"
numpy.ma.MaskedArray.resize,Warning,
numpy.ma.swapaxes,Return a view of the array with axis1 and axis2 interchanged.,
numpy.ma.transpose,Permute the dimensions of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 1],</span>
<span class=""go"">        [2, --]],</span>
<span class=""go"">  mask=[[False, False],</span>
<span class=""go"">        [False,  True]],</span>
<span class=""go"">  fill_value=999999)</span>
</pre>"
numpy.ma.MaskedArray.swapaxes,Return a view of the array with axis1 and axis2 interchanged.,
numpy.ma.MaskedArray.transpose,Returns a view of the array with axes transposed.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [3, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">transpose</span><span class=""p"">()</span>
<span class=""go"">array([[1, 3],</span>
<span class=""go"">       [2, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">transpose</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">))</span>
<span class=""go"">array([[1, 3],</span>
<span class=""go"">       [2, 4]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""o"">.</span><span class=""n"">transpose</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">)</span>
<span class=""go"">array([[1, 3],</span>
<span class=""go"">       [2, 4]])</span>
</pre>"
numpy.ma.atleast_1d,Convert inputs to arrays with at least one dimension.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_1d</span><span class=""p"">(</span><span class=""mf"">1.0</span><span class=""p"">)</span>
<span class=""go"">array([1.])</span>
</pre>"
numpy.ma.atleast_2d,View inputs as arrays with at least two dimensions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_2d</span><span class=""p"">(</span><span class=""mf"">3.0</span><span class=""p"">)</span>
<span class=""go"">array([[3.]])</span>
</pre>"
numpy.ma.atleast_3d,View inputs as arrays with at least three dimensions.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">atleast_3d</span><span class=""p"">(</span><span class=""mf"">3.0</span><span class=""p"">)</span>
<span class=""go"">array([[[3.]]])</span>
</pre>"
numpy.ma.expand_dims,Expand the shape of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(2,)</span>
</pre>"
numpy.ma.squeeze,Remove axes of length one from a.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[[</span><span class=""mi"">0</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">]]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 3, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3,)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(3, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">1</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""gt"">Traceback (most recent call last):</span>
<span class=""c"">...</span>
<span class=""gr"">ValueError</span>: <span class=""n"">cannot select an axis to squeeze out which has size not equal to one</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">2</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 3)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1234</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(1, 1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">array(1234)  # 0d array</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">()</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">squeeze</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)[()]</span>
<span class=""go"">1234</span>
</pre>"
numpy.ma.MaskedArray.squeeze,Remove axes of length one from a.,
numpy.ma.stack,Join a sequence of arrays along a new axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arrays</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span> <span class=""k"">for</span> <span class=""n"">_</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">stack</span><span class=""p"">(</span><span class=""n"">arrays</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(10, 3, 4)</span>
</pre>"
numpy.ma.column_stack,Stack 1-D arrays as columns into a 2-D array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">column_stack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [2, 3],</span>
<span class=""go"">       [3, 4]])</span>
</pre>"
numpy.ma.concatenate,Concatenate a sequence of arrays along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(data=[0, --, 2],</span>
<span class=""go"">             mask=[False,  True, False],</span>
<span class=""go"">       fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span>
<span class=""go"">masked_array(data=[2, 3, 4],</span>
<span class=""go"">             mask=False,</span>
<span class=""go"">       fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">concatenate</span><span class=""p"">([</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">])</span>
<span class=""go"">masked_array(data=[0, --, 2, 2, 3, 4],</span>
<span class=""go"">             mask=[False,  True, False, False, False, False],</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.dstack,Stack arrays in sequence depth wise (along third axis).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[[1, 2],</span>
<span class=""go"">        [2, 3],</span>
<span class=""go"">        [3, 4]]])</span>
</pre>"
numpy.ma.hstack,Stack arrays in sequence horizontally (column wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([1, 2, 3, 4, 5, 6])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">4</span><span class=""p"">],[</span><span class=""mi"">5</span><span class=""p"">],[</span><span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 4],</span>
<span class=""go"">       [2, 5],</span>
<span class=""go"">       [3, 6]])</span>
</pre>"
numpy.ma.hsplit,Split an array into multiple sub-arrays horizontally (column-wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">16.0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[ 0.,   1.,   2.,   3.],</span>
<span class=""go"">       [ 4.,   5.,   6.,   7.],</span>
<span class=""go"">       [ 8.,   9.,  10.,  11.],</span>
<span class=""go"">       [12.,  13.,  14.,  15.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""go"">[array([[  0.,   1.],</span>
<span class=""go"">       [  4.,   5.],</span>
<span class=""go"">       [  8.,   9.],</span>
<span class=""go"">       [12.,  13.]]),</span>
<span class=""go""> array([[  2.,   3.],</span>
<span class=""go"">       [  6.,   7.],</span>
<span class=""go"">       [10.,  11.],</span>
<span class=""go"">       [14.,  15.]])]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hsplit</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">]))</span>
<span class=""go"">[array([[ 0.,   1.,   2.],</span>
<span class=""go"">       [ 4.,   5.,   6.],</span>
<span class=""go"">       [ 8.,   9.,  10.],</span>
<span class=""go"">       [12.,  13.,  14.]]),</span>
<span class=""go""> array([[ 3.],</span>
<span class=""go"">       [ 7.],</span>
<span class=""go"">       [11.],</span>
<span class=""go"">       [15.]]),</span>
<span class=""go""> array([], shape=(4, 0), dtype=float64)]</span>
</pre>"
numpy.ma.mr_,Translate slice objects to concatenation along the first axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mr_</span><span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">]),</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">])]</span>
<span class=""go"">masked_array(data=[1, 2, 3, ..., 4, 5, 6],</span>
<span class=""go"">             mask=False,</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.row_stack,Stack arrays in sequence vertically (row wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
</pre>"
numpy.ma.vstack,Stack arrays in sequence vertically (row wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
</pre>"
numpy.ma.concatenate,Concatenate a sequence of arrays along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(data=[0, --, 2],</span>
<span class=""go"">             mask=[False,  True, False],</span>
<span class=""go"">       fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span>
<span class=""go"">masked_array(data=[2, 3, 4],</span>
<span class=""go"">             mask=False,</span>
<span class=""go"">       fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">concatenate</span><span class=""p"">([</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">])</span>
<span class=""go"">masked_array(data=[0, --, 2, 2, 3, 4],</span>
<span class=""go"">             mask=[False,  True, False, False, False, False],</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.stack,Join a sequence of arrays along a new axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">arrays</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">random</span><span class=""o"">.</span><span class=""n"">randn</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">)</span> <span class=""k"">for</span> <span class=""n"">_</span> <span class=""ow"">in</span> <span class=""nb"">range</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">stack</span><span class=""p"">(</span><span class=""n"">arrays</span><span class=""p"">,</span> <span class=""n"">axis</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">shape</span>
<span class=""go"">(10, 3, 4)</span>
</pre>"
numpy.ma.vstack,Stack arrays in sequence vertically (row wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">vstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2, 3],</span>
<span class=""go"">       [4, 5, 6]])</span>
</pre>"
numpy.ma.hstack,Stack arrays in sequence horizontally (column wise).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">4</span><span class=""p"">,</span><span class=""mi"">5</span><span class=""p"">,</span><span class=""mi"">6</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([1, 2, 3, 4, 5, 6])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">],[</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">4</span><span class=""p"">],[</span><span class=""mi"">5</span><span class=""p"">],[</span><span class=""mi"">6</span><span class=""p"">]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">hstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 4],</span>
<span class=""go"">       [2, 5],</span>
<span class=""go"">       [3, 6]])</span>
</pre>"
numpy.ma.dstack,Stack arrays in sequence depth wise (along third axis).,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dstack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[[1, 2],</span>
<span class=""go"">        [2, 3],</span>
<span class=""go"">        [3, 4]]])</span>
</pre>"
numpy.ma.column_stack,Stack 1-D arrays as columns into a 2-D array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">((</span><span class=""mi"">2</span><span class=""p"">,</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">column_stack</span><span class=""p"">((</span><span class=""n"">a</span><span class=""p"">,</span><span class=""n"">b</span><span class=""p"">))</span>
<span class=""go"">array([[1, 2],</span>
<span class=""go"">       [2, 3],</span>
<span class=""go"">       [3, 4]])</span>
</pre>"
numpy.ma.append,Append values to the end of an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_values</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">b</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_values</span><span class=""p"">([[</span><span class=""mi"">4</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">7</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">9</span><span class=""p"">]],</span> <span class=""mi"">7</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">append</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">b</span><span class=""p"">)</span>
<span class=""go"">masked_array(data=[1, --, 3, 4, 5, 6, --, 8, 9],</span>
<span class=""go"">             mask=[False,  True, False, False, False, False,  True, False,</span>
<span class=""go"">                   False],</span>
<span class=""go"">       fill_value=999999)</span>
</pre>"
numpy.ma.make_mask,Create a boolean mask from an array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">False</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">,</span> <span class=""kc"">True</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">array([ True, False,  True,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">array([ True, False,  True,  True])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">3</span><span class=""p"">]</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">(</span><span class=""n"">m</span><span class=""p"">)</span>
<span class=""go"">array([ True, False,  True,  True])</span>
</pre>"
numpy.ma.make_mask_none,"Return a boolean mask of the given shape, filled with False.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask_none</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,))</span>
<span class=""go"">array([False, False, False])</span>
</pre>"
numpy.ma.mask_or,Combine two masks with the logical_or operator.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m1</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m2</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mask_or</span><span class=""p"">(</span><span class=""n"">m1</span><span class=""p"">,</span> <span class=""n"">m2</span><span class=""p"">)</span>
<span class=""go"">array([ True,  True,  True, False])</span>
</pre>"
numpy.ma.make_mask_descr,Construct a dtype description list from a given dtype.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dtype</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">dtype</span><span class=""p"">({</span><span class=""s1"">'names'</span><span class=""p"">:[</span><span class=""s1"">'foo'</span><span class=""p"">,</span> <span class=""s1"">'bar'</span><span class=""p"">],</span>
<span class=""gp"">... </span>                  <span class=""s1"">'formats'</span><span class=""p"">:[</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">int64</span><span class=""p"">]})</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">dtype</span>
<span class=""go"">dtype([('foo', '&lt;f4'), ('bar', '&lt;i8')])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask_descr</span><span class=""p"">(</span><span class=""n"">dtype</span><span class=""p"">)</span>
<span class=""go"">dtype([('foo', '|b1'), ('bar', '|b1')])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask_descr</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">float32</span><span class=""p"">)</span>
<span class=""go"">dtype('bool')</span>
</pre>"
numpy.ma.getmask,"Return the mask of a masked array, or nomask.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">getmask</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[False,  True],</span>
<span class=""go"">       [False, False]])</span>
</pre>"
numpy.ma.getmaskarray,"Return the mask of a masked array, or full boolean array of False.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span><span class=""p"">],[</span><span class=""mi"">3</span><span class=""p"">,</span><span class=""mi"">4</span><span class=""p"">]],</span> <span class=""mi"">2</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, --],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=[[False,  True],</span>
<span class=""go"">        [False, False]],</span>
<span class=""go"">  fill_value=2)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">getmaskarray</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([[False,  True],</span>
<span class=""go"">       [False, False]])</span>
</pre>"
numpy.ma.masked_array.mask,Current mask.,
numpy.ma.ndenumerate,Multidimensional index iterator.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 1, 2],</span>
<span class=""go"">        [--, 4, --],</span>
<span class=""go"">        [6, --, 8]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [ True, False,  True],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""k"">for</span> <span class=""n"">index</span><span class=""p"">,</span> <span class=""n"">x</span> <span class=""ow"">in</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">ndenumerate</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">):</span>
<span class=""gp"">... </span>    <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">index</span><span class=""p"">,</span> <span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">(0, 0) 0</span>
<span class=""go"">(0, 1) 1</span>
<span class=""go"">(0, 2) 2</span>
<span class=""go"">(1, 1) 4</span>
<span class=""go"">(2, 0) 6</span>
<span class=""go"">(2, 2) 8</span>
</pre>"
numpy.ma.flatnotmasked_contiguous,Find contiguous unmasked data in a masked array.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">flatnotmasked_contiguous</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">[slice(0, 10, None)]</span>
</pre>"
numpy.ma.flatnotmasked_edges,Find the indices of the first and last unmasked values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">flatnotmasked_edges</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">array([0, 9])</span>
</pre>"
numpy.ma.notmasked_contiguous,Find contiguous unmasked data in a masked array along the given axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">12</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">mask</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">mask</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">:,</span> <span class=""p"">:</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span> <span class=""n"">mask</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span> <span class=""n"">mask</span><span class=""p"">[</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">0</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""n"">mask</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, --, 2, 3],</span>
<span class=""go"">        [--, --, --, 7],</span>
<span class=""go"">        [8, --, --, 11]],</span>
<span class=""go"">  mask=[[False,  True, False, False],</span>
<span class=""go"">        [ True,  True,  True, False],</span>
<span class=""go"">        [False,  True,  True, False]],</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">(</span><span class=""n"">ma</span><span class=""p"">[</span><span class=""o"">~</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mask</span><span class=""p"">])</span>
<span class=""go"">array([ 0,  2,  3,  7, 8, 11])</span>
</pre>"
numpy.ma.notmasked_edges,Find the indices of the first and last unmasked values along an axis.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">9</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros_like</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">:,</span> <span class=""mi"">1</span><span class=""p"">:]</span> <span class=""o"">=</span> <span class=""mi"">1</span>
</pre>"
numpy.ma.clump_masked,"Returns a list of slices corresponding to the masked clumps of a 1-D array.
(A “clump” is defined as a contiguous region of the array).","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_array</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">9</span><span class=""p"">]]</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">clump_masked</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">[slice(0, 3, None), slice(6, 7, None), slice(8, 10, None)]</span>
</pre>"
numpy.ma.clump_unmasked,"Return list of slices corresponding to the unmasked clumps of a 1-D array.
(A “clump” is defined as a contiguous region of the array).","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_array</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">))</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[[</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">,</span> <span class=""mi"">9</span><span class=""p"">]]</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">clump_unmasked</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">[slice(3, 6, None), slice(7, 8, None)]</span>
</pre>"
numpy.ma.mask_cols,Mask columns of a 2D array that contain masked values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">1</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[0, 0, 0],</span>
<span class=""go"">       [0, 1, 0],</span>
<span class=""go"">       [0, 0, 0]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 0, 0],</span>
<span class=""go"">        [0, --, 0],</span>
<span class=""go"">        [0, 0, 0]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [False,  True, False],</span>
<span class=""go"">        [False, False, False]],</span>
<span class=""go"">  fill_value=1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mask_cols</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, --, 0],</span>
<span class=""go"">        [0, --, 0],</span>
<span class=""go"">        [0, --, 0]],</span>
<span class=""go"">  mask=[[False,  True, False],</span>
<span class=""go"">        [False,  True, False],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=1)</span>
</pre>"
numpy.ma.mask_or,Combine two masks with the logical_or operator.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m1</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">([</span><span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">m2</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">make_mask</span><span class=""p"">([</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">,</span> <span class=""mi"">0</span><span class=""p"">])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mask_or</span><span class=""p"">(</span><span class=""n"">m1</span><span class=""p"">,</span> <span class=""n"">m2</span><span class=""p"">)</span>
<span class=""go"">array([ True,  True,  True, False])</span>
</pre>"
numpy.ma.mask_rowcols,Mask rows and/or columns of a 2D array that contain masked values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">1</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[0, 0, 0],</span>
<span class=""go"">       [0, 1, 0],</span>
<span class=""go"">       [0, 0, 0]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 0, 0],</span>
<span class=""go"">        [0, --, 0],</span>
<span class=""go"">        [0, 0, 0]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [False,  True, False],</span>
<span class=""go"">        [False, False, False]],</span>
<span class=""go"">  fill_value=1)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">mask_rowcols</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">)</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, --, 0],</span>
<span class=""go"">        [--, --, --],</span>
<span class=""go"">        [0, --, 0]],</span>
<span class=""go"">  mask=[[False,  True, False],</span>
<span class=""go"">        [ True,  True,  True],</span>
<span class=""go"">        [False,  True, False]],</span>
<span class=""go"">  fill_value=1)</span>
</pre>"
numpy.ma.mask_rows,Mask rows of a 2D array that contain masked values.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""kn"">import</span> <span class=""nn"">numpy.ma</span> <span class=""k"">as</span> <span class=""nn"">ma</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">zeros</span><span class=""p"">((</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span> <span class=""n"">dtype</span><span class=""o"">=</span><span class=""nb"">int</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""mi"">1</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">array([[0, 0, 0],</span>
<span class=""go"">       [0, 1, 0],</span>
<span class=""go"">       [0, 0, 0]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span> <span class=""o"">=</span> <span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">masked_equal</span><span class=""p"">(</span><span class=""n"">a</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">a</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0, 0, 0],</span>
<span class=""go"">        [0, --, 0],</span>
<span class=""go"">        [0, 0, 0]],</span>
<span class=""go"">  mask=[[False, False, False],</span>
<span class=""go"">        [False,  True, False],</span>
<span class=""go"">        [False, False, False]],</span>
<span class=""go"">  fill_value=1)</span>
</pre>"
numpy.ma.harden_mask,"Force the mask to hard, preventing unmasking by assignment.",
numpy.ma.soften_mask,"Force the mask to soft (default), allowing unmasking by assignment.",
numpy.ma.MaskedArray.harden_mask,"Force the mask to hard, preventing unmasking by assignment.",
numpy.ma.MaskedArray.soften_mask,"Force the mask to soft (default), allowing unmasking by assignment.",
numpy.ma.MaskedArray.shrink_mask,Reduce a mask to nomask when possible.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([[</span><span class=""mi"">1</span><span class=""p"">,</span><span class=""mi"">2</span> <span class=""p"">],</span> <span class=""p"">[</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""mi"">4</span><span class=""p"">]],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span><span class=""o"">*</span><span class=""mi"">4</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">mask</span>
<span class=""go"">array([[False, False],</span>
<span class=""go"">       [False, False]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">shrink_mask</span><span class=""p"">()</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[1, 2],</span>
<span class=""go"">        [3, 4]],</span>
<span class=""go"">  mask=False,</span>
<span class=""go"">  fill_value=999999)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span><span class=""o"">.</span><span class=""n"">mask</span>
<span class=""go"">False</span>
</pre>"
numpy.ma.MaskedArray.unshare_mask,Copy the mask and set the sharedmask flag to False.,
numpy.ma.asarray,Convert the input to a masked array of the given data-type.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">10.</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0., 1., 2., 3., 4.],</span>
<span class=""go"">       [5., 6., 7., 8., 9.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">asarray</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0., 1., 2., 3., 4.],</span>
<span class=""go"">        [5., 6., 7., 8., 9.]],</span>
<span class=""go"">  mask=False,</span>
<span class=""go"">  fill_value=1e+20)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">type</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">asarray</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">))</span>
<span class=""go"">&lt;class 'numpy.ma.core.MaskedArray'&gt;</span>
</pre>"
numpy.ma.asanyarray,"Convert the input to a masked array, conserving subclasses.","<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">arange</span><span class=""p"">(</span><span class=""mf"">10.</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">reshape</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">array([[0., 1., 2., 3., 4.],</span>
<span class=""go"">       [5., 6., 7., 8., 9.]])</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">asanyarray</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">masked_array(</span>
<span class=""go"">  data=[[0., 1., 2., 3., 4.],</span>
<span class=""go"">        [5., 6., 7., 8., 9.]],</span>
<span class=""go"">  mask=False,</span>
<span class=""go"">  fill_value=1e+20)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""nb"">type</span><span class=""p"">(</span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">asanyarray</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">))</span>
<span class=""go"">&lt;class 'numpy.ma.core.MaskedArray'&gt;</span>
</pre>"
numpy.ma.fix_invalid,Return input with invalid data masked and replaced by a fill value.,"<pre><span></span><span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span> <span class=""o"">=</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">array</span><span class=""p"">([</span><span class=""mf"">1.</span><span class=""p"">,</span> <span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">nan</span><span class=""p"">,</span> <span class=""n"">np</span><span class=""o"">.</span><span class=""n"">inf</span><span class=""p"">],</span> <span class=""n"">mask</span><span class=""o"">=</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]</span> <span class=""o"">+</span> <span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span><span class=""o"">*</span><span class=""mi"">3</span><span class=""p"">)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">x</span>
<span class=""go"">masked_array(data=[--, -1.0, nan, inf],</span>
<span class=""go"">             mask=[ True, False, False, False],</span>
<span class=""go"">       fill_value=1e+20)</span>
<span class=""gp"">&gt;&gt;&gt; </span><span class=""n"">np</span><span class=""o"">.</span><span class=""n"">ma</span><span class=""o"">.</span><span class=""n"">fix_invalid</span><span class=""p"">(</span><span class=""n"">x</span><span class=""p"">)</span>
<span class=""go"">masked_array(data=[--, -1.0, --, --],</span>
<span class=""go"">             mask=[ True, False,  True,  True],</span>
<span class=""go"">       fill_value=1e+20)</span>
</pre>"
